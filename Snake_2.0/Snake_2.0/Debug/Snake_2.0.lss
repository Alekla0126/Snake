
Snake_2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000f3c  00000fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  00800116  00800116  00000fe6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012dd  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098f  00000000  00000000  00002459  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000985  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a73  00000000  00000000  00004032  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00004aa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_1>
   8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_2>
   c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_3>
  10:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 39       	cpi	r26, 0x93	; 147
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 03 	call	0x698	; 0x698 <main>
  9e:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_interrupts>:
	DDRD &= ~(UP | DOWN | LEFT | RIGHT);
}
bool button_pressed(uint8_t button)
{
	return PIND & button;
}
  a6:	e9 e6       	ldi	r30, 0x69	; 105
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 60       	ori	r24, 0x0C	; 12
  ae:	80 83       	st	Z, r24
  b0:	8d b3       	in	r24, 0x1d	; 29
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	8d bb       	out	0x1d, r24	; 29
  b6:	78 94       	sei
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
  be:	ed e6       	ldi	r30, 0x6D	; 109
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
  c8:	eb e6       	ldi	r30, 0x6B	; 107
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <handle_keypress>:
  d4:	fc 01       	movw	r30, r24
  d6:	20 81       	ld	r18, Z
  d8:	91 81       	ldd	r25, Z+1	; 0x01
  da:	29 17       	cp	r18, r25
  dc:	01 f1       	breq	.+64     	; 0x11e <handle_keypress+0x4a>
  de:	22 23       	and	r18, r18
  e0:	11 f0       	breq	.+4      	; 0xe6 <handle_keypress+0x12>
  e2:	91 11       	cpse	r25, r1
  e4:	1c c0       	rjmp	.+56     	; 0x11e <handle_keypress+0x4a>
  e6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <direction>
  ea:	02 2e       	mov	r0, r18
  ec:	00 0c       	add	r0, r0
  ee:	33 0b       	sbc	r19, r19
  f0:	28 0f       	add	r18, r24
  f2:	31 1d       	adc	r19, r1
  f4:	87 fd       	sbrc	r24, 7
  f6:	3a 95       	dec	r19
  f8:	23 2b       	or	r18, r19
  fa:	89 f0       	breq	.+34     	; 0x11e <handle_keypress+0x4a>
  fc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <direction+0x1>
 100:	29 2f       	mov	r18, r25
 102:	99 0f       	add	r25, r25
 104:	33 0b       	sbc	r19, r19
 106:	28 0f       	add	r18, r24
 108:	31 1d       	adc	r19, r1
 10a:	87 fd       	sbrc	r24, 7
 10c:	3a 95       	dec	r19
 10e:	23 2b       	or	r18, r19
 110:	31 f0       	breq	.+12     	; 0x11e <handle_keypress+0x4a>
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <direction+0x1>
 11a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <direction>
 11e:	08 95       	ret

00000120 <set_cell>:
 120:	dc 01       	movw	r26, r24
 122:	11 96       	adiw	r26, 0x01	; 1
 124:	2c 91       	ld	r18, X
 126:	11 97       	sbiw	r26, 0x01	; 1
 128:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <world+0x24>
 12c:	23 03       	mulsu	r18, r19
 12e:	f0 01       	movw	r30, r0
 130:	11 24       	eor	r1, r1
 132:	8c 91       	ld	r24, X
 134:	eb 59       	subi	r30, 0x9B	; 155
 136:	fe 4f       	sbci	r31, 0xFE	; 254
 138:	e8 0f       	add	r30, r24
 13a:	f1 1d       	adc	r31, r1
 13c:	87 fd       	sbrc	r24, 7
 13e:	fa 95       	dec	r31
 140:	60 83       	st	Z, r22
 142:	08 95       	ret

00000144 <direction_to_position>:
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	71 f0       	breq	.+28     	; 0x164 <direction_to_position+0x20>
 148:	18 f4       	brcc	.+6      	; 0x150 <direction_to_position+0xc>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	41 f0       	breq	.+16     	; 0x15e <direction_to_position+0x1a>
 14e:	0d c0       	rjmp	.+26     	; 0x16a <direction_to_position+0x26>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	d1 f0       	breq	.+52     	; 0x188 <direction_to_position+0x44>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	49 f4       	brne	.+18     	; 0x16a <direction_to_position+0x26>
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 95       	ret
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	08 95       	ret
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret
 16a:	1f 92       	push	r1
 16c:	8f 93       	push	r24
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	9f 93       	push	r25
 174:	8f 93       	push	r24
 176:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <printf>
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	08 95       	ret
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret

0000018e <position_to_direction>:
 18e:	fc 01       	movw	r30, r24
 190:	90 81       	ld	r25, Z
 192:	9f 3f       	cpi	r25, 0xFF	; 255
 194:	39 f0       	breq	.+14     	; 0x1a4 <position_to_direction+0x16>
 196:	91 30       	cpi	r25, 0x01	; 1
 198:	39 f0       	breq	.+14     	; 0x1a8 <position_to_direction+0x1a>
 19a:	81 81       	ldd	r24, Z+1	; 0x01
 19c:	8f 3f       	cpi	r24, 0xFF	; 255
 19e:	31 f0       	breq	.+12     	; 0x1ac <position_to_direction+0x1e>
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	08 95       	ret
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	08 95       	ret
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	08 95       	ret

000001b0 <cell_at>:
 1b0:	dc 01       	movw	r26, r24
 1b2:	11 96       	adiw	r26, 0x01	; 1
 1b4:	2c 91       	ld	r18, X
 1b6:	11 97       	sbiw	r26, 0x01	; 1
 1b8:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <world+0x24>
 1bc:	23 03       	mulsu	r18, r19
 1be:	f0 01       	movw	r30, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8c 91       	ld	r24, X
 1c4:	eb 59       	subi	r30, 0x9B	; 155
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	e8 0f       	add	r30, r24
 1ca:	f1 1d       	adc	r31, r1
 1cc:	87 fd       	sbrc	r24, 7
 1ce:	fa 95       	dec	r31
 1d0:	80 81       	ld	r24, Z
 1d2:	08 95       	ret

000001d4 <place_food>:
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	c7 e1       	ldi	r28, 0x17	; 23
 1de:	d1 e0       	ldi	r29, 0x01	; 1
 1e0:	05 e6       	ldi	r16, 0x65	; 101
 1e2:	11 e0       	ldi	r17, 0x01	; 1
 1e4:	0e 94 4b 04 	call	0x896	; 0x896 <rand>
 1e8:	f8 01       	movw	r30, r16
 1ea:	64 a1       	ldd	r22, Z+36	; 0x24
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__divmodhi4>
 1f2:	88 83       	st	Y, r24
 1f4:	0e 94 4b 04 	call	0x896	; 0x896 <rand>
 1f8:	f8 01       	movw	r30, r16
 1fa:	63 a1       	ldd	r22, Z+35	; 0x23
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__divmodhi4>
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	ce 01       	movw	r24, r28
 206:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <cell_at>
 20a:	81 11       	cpse	r24, r1
 20c:	eb cf       	rjmp	.-42     	; 0x1e4 <place_food+0x10>
 20e:	65 e0       	ldi	r22, 0x05	; 5
 210:	87 e1       	ldi	r24, 0x17	; 23
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 90 00 	call	0x120	; 0x120 <set_cell>
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <handle_wrapping>:
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	2c f4       	brge	.+10     	; 0x234 <handle_wrapping+0x12>
 22a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <world+0x24>
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	80 83       	st	Z, r24
 232:	0a c0       	rjmp	.+20     	; 0x248 <handle_wrapping+0x26>
 234:	08 2e       	mov	r0, r24
 236:	00 0c       	add	r0, r0
 238:	99 0b       	sbc	r25, r25
 23a:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <world+0x24>
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	82 17       	cp	r24, r18
 242:	93 07       	cpc	r25, r19
 244:	0c f0       	brlt	.+2      	; 0x248 <handle_wrapping+0x26>
 246:	10 82       	st	Z, r1
 248:	21 81       	ldd	r18, Z+1	; 0x01
 24a:	22 23       	and	r18, r18
 24c:	2c f4       	brge	.+10     	; 0x258 <handle_wrapping+0x36>
 24e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <world+0x23>
 252:	81 50       	subi	r24, 0x01	; 1
 254:	81 83       	std	Z+1, r24	; 0x01
 256:	08 95       	ret
 258:	02 2e       	mov	r0, r18
 25a:	00 0c       	add	r0, r0
 25c:	33 0b       	sbc	r19, r19
 25e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <world+0x23>
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	28 17       	cp	r18, r24
 266:	39 07       	cpc	r19, r25
 268:	0c f0       	brlt	.+2      	; 0x26c <handle_wrapping+0x4a>
 26a:	11 82       	std	Z+1, r1	; 0x01
 26c:	08 95       	ret

0000026e <move_head>:
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	00 d0       	rcall	.+0      	; 0x278 <move_head+0xa>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	8c 01       	movw	r16, r24
 27e:	fc 01       	movw	r30, r24
 280:	90 81       	ld	r25, Z
 282:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <snake+0x48>
 286:	98 13       	cpse	r25, r24
 288:	21 c0       	rjmp	.+66     	; 0x2cc <move_head+0x5e>
 28a:	91 81       	ldd	r25, Z+1	; 0x01
 28c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <snake+0x49>
 290:	98 13       	cpse	r25, r24
 292:	1c c0       	rjmp	.+56     	; 0x2cc <move_head+0x5e>
 294:	81 e6       	ldi	r24, 0x61	; 97
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <cell_at>
 29c:	0e 94 a2 00 	call	0x144	; 0x144 <direction_to_position>
 2a0:	01 e6       	ldi	r16, 0x61	; 97
 2a2:	11 e0       	ldi	r17, 0x01	; 1
 2a4:	f8 01       	movw	r30, r16
 2a6:	20 81       	ld	r18, Z
 2a8:	82 0f       	add	r24, r18
 2aa:	89 83       	std	Y+1, r24	; 0x01
 2ac:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <snake+0x49>
 2b0:	98 0f       	add	r25, r24
 2b2:	9a 83       	std	Y+2, r25	; 0x02
 2b4:	ce 01       	movw	r24, r28
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	0e 94 11 01 	call	0x222	; 0x222 <handle_wrapping>
 2bc:	f8 01       	movw	r30, r16
 2be:	80 81       	ld	r24, Z
 2c0:	91 81       	ldd	r25, Z+1	; 0x01
 2c2:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <snake+0x47>
 2c6:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <snake+0x46>
 2ca:	10 c0       	rjmp	.+32     	; 0x2ec <move_head+0x7e>
 2cc:	8b e8       	ldi	r24, 0x8B	; 139
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 c7 00 	call	0x18e	; 0x18e <position_to_direction>
 2d4:	f8 01       	movw	r30, r16
 2d6:	20 81       	ld	r18, Z
 2d8:	31 81       	ldd	r19, Z+1	; 0x01
 2da:	30 93 60 01 	sts	0x0160, r19	; 0x800160 <snake+0x47>
 2de:	20 93 5f 01 	sts	0x015F, r18	; 0x80015f <snake+0x46>
 2e2:	68 2f       	mov	r22, r24
 2e4:	8f e5       	ldi	r24, 0x5F	; 95
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 90 00 	call	0x120	; 0x120 <set_cell>
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <move_tail>:
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <move_tail+0x8>
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <snake+0x48>
 30a:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <snake+0x49>
 30e:	9a 83       	std	Y+2, r25	; 0x02
 310:	89 83       	std	Y+1, r24	; 0x01
 312:	81 e6       	ldi	r24, 0x61	; 97
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <cell_at>
 31a:	18 2f       	mov	r17, r24
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	a9 f0       	breq	.+42     	; 0x34a <move_tail+0x50>
 320:	18 f4       	brcc	.+6      	; 0x328 <move_tail+0x2e>
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	71 f0       	breq	.+28     	; 0x342 <move_tail+0x48>
 326:	15 c0       	rjmp	.+42     	; 0x352 <move_tail+0x58>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	19 f0       	breq	.+6      	; 0x332 <move_tail+0x38>
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	29 f0       	breq	.+10     	; 0x33a <move_tail+0x40>
 330:	10 c0       	rjmp	.+32     	; 0x352 <move_tail+0x58>
 332:	8a 81       	ldd	r24, Y+2	; 0x02
 334:	81 50       	subi	r24, 0x01	; 1
 336:	8a 83       	std	Y+2, r24	; 0x02
 338:	18 c0       	rjmp	.+48     	; 0x36a <move_tail+0x70>
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	8a 83       	std	Y+2, r24	; 0x02
 340:	14 c0       	rjmp	.+40     	; 0x36a <move_tail+0x70>
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	81 50       	subi	r24, 0x01	; 1
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	10 c0       	rjmp	.+32     	; 0x36a <move_tail+0x70>
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	0c c0       	rjmp	.+24     	; 0x36a <move_tail+0x70>
 352:	1f 92       	push	r1
 354:	1f 93       	push	r17
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	9f 93       	push	r25
 35c:	8f 93       	push	r24
 35e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <printf>
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	0e 94 11 01 	call	0x222	; 0x222 <handle_wrapping>
 372:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <snake+0x46>
 376:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <snake+0x48>
 37a:	98 13       	cpse	r25, r24
 37c:	0c c0       	rjmp	.+24     	; 0x396 <move_tail+0x9c>
 37e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <snake+0x47>
 382:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <snake+0x49>
 386:	98 13       	cpse	r25, r24
 388:	06 c0       	rjmp	.+12     	; 0x396 <move_tail+0x9c>
 38a:	61 2f       	mov	r22, r17
 38c:	81 e6       	ldi	r24, 0x61	; 97
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 90 00 	call	0x120	; 0x120 <set_cell>
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <move_tail+0xa6>
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	81 e6       	ldi	r24, 0x61	; 97
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 90 00 	call	0x120	; 0x120 <set_cell>
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	9a 81       	ldd	r25, Y+2	; 0x02
 3a4:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <snake+0x49>
 3a8:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <snake+0x48>
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	08 95       	ret

000003b8 <eat_food>:
 3b8:	cf 93       	push	r28
 3ba:	c6 2f       	mov	r28, r22
 3bc:	0e 94 37 01 	call	0x26e	; 0x26e <move_head>
 3c0:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <snake+0x4a>
 3c4:	c5 30       	cpi	r28, 0x05	; 5
 3c6:	11 f0       	breq	.+4      	; 0x3cc <eat_food+0x14>
 3c8:	95 e0       	ldi	r25, 0x05	; 5
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <eat_food+0x16>
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	89 0f       	add	r24, r25
 3d0:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <snake+0x4a>
 3d4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <place_food>
 3d8:	e4 e6       	ldi	r30, 0x64	; 100
 3da:	f1 e0       	ldi	r31, 0x01	; 1
 3dc:	80 81       	ld	r24, Z
 3de:	8f 5f       	subi	r24, 0xFF	; 255
 3e0:	80 83       	st	Z, r24
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <tick>:
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <tick+0x6>
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	8b e8       	ldi	r24, 0x8B	; 139
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 c7 00 	call	0x18e	; 0x18e <position_to_direction>
 3f8:	68 2f       	mov	r22, r24
 3fa:	8f e5       	ldi	r24, 0x5F	; 95
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 90 00 	call	0x120	; 0x120 <set_cell>
 402:	eb e8       	ldi	r30, 0x8B	; 139
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	90 81       	ld	r25, Z
 408:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <snake+0x46>
 40c:	89 0f       	add	r24, r25
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	91 81       	ldd	r25, Z+1	; 0x01
 412:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <snake+0x47>
 416:	89 0f       	add	r24, r25
 418:	8a 83       	std	Y+2, r24	; 0x02
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	0e 94 11 01 	call	0x222	; 0x222 <handle_wrapping>
 422:	ce 01       	movw	r24, r28
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <cell_at>
 42a:	88 23       	and	r24, r24
 42c:	51 f0       	breq	.+20     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 42e:	9b ef       	ldi	r25, 0xFB	; 251
 430:	98 0f       	add	r25, r24
 432:	92 30       	cpi	r25, 0x02	; 2
 434:	68 f4       	brcc	.+26     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 436:	68 2f       	mov	r22, r24
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <eat_food>
 440:	1e c0       	rjmp	.+60     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 442:	ce 01       	movw	r24, r28
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	0e 94 37 01 	call	0x26e	; 0x26e <move_head>
 44a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <move_tail>
 44e:	17 c0       	rjmp	.+46     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 450:	99 81       	ldd	r25, Y+1	; 0x01
 452:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <snake+0x48>
 456:	98 13       	cpse	r25, r24
 458:	0f c0       	rjmp	.+30     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45a:	9a 81       	ldd	r25, Y+2	; 0x02
 45c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <snake+0x49>
 460:	98 13       	cpse	r25, r24
 462:	0a c0       	rjmp	.+20     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	0e 94 37 01 	call	0x26e	; 0x26e <move_head>
 46c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <move_tail>
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <world+0x25>
 476:	03 c0       	rjmp	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <world+0x25>
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <init_game>:
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	00 d0       	rcall	.+0      	; 0x492 <init_game+0xa>
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	83 e2       	ldi	r24, 0x23	; 35
 498:	9a e4       	ldi	r25, 0x4A	; 74
 49a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <srand>
 49e:	eb e8       	ldi	r30, 0x8B	; 139
 4a0:	f1 e0       	ldi	r31, 0x01	; 1
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 83       	st	Z, r24
 4a6:	11 82       	std	Z+1, r1	; 0x01
 4a8:	e5 e6       	ldi	r30, 0x65	; 101
 4aa:	f1 e0       	ldi	r31, 0x01	; 1
 4ac:	85 e0       	ldi	r24, 0x05	; 5
 4ae:	83 a3       	std	Z+35, r24	; 0x23
 4b0:	87 e0       	ldi	r24, 0x07	; 7
 4b2:	84 a3       	std	Z+36, r24	; 0x24
 4b4:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <snake+0x4a>
 4b8:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <snake+0x4b>
 4bc:	88 e8       	ldi	r24, 0x88	; 136
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	11 92       	st	Z+, r1
 4c2:	e8 17       	cp	r30, r24
 4c4:	f9 07       	cpc	r31, r25
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <init_game+0x38>
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	89 83       	std	Y+1, r24	; 0x01
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	8a 83       	std	Y+2, r24	; 0x02
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	ce 01       	movw	r24, r28
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	0e 94 90 00 	call	0x120	; 0x120 <set_cell>
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	9a 81       	ldd	r25, Y+2	; 0x02
 4de:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <snake+0x47>
 4e2:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <snake+0x46>
 4e6:	05 e6       	ldi	r16, 0x65	; 101
 4e8:	11 e0       	ldi	r17, 0x01	; 1
 4ea:	f8 01       	movw	r30, r16
 4ec:	93 a1       	ldd	r25, Z+35	; 0x23
 4ee:	96 95       	lsr	r25
 4f0:	84 a1       	ldd	r24, Z+36	; 0x24
 4f2:	86 95       	lsr	r24
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	89 83       	std	Y+1, r24	; 0x01
 4f8:	9a 83       	std	Y+2, r25	; 0x02
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	ce 01       	movw	r24, r28
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	0e 94 90 00 	call	0x120	; 0x120 <set_cell>
 504:	f8 01       	movw	r30, r16
 506:	93 a1       	ldd	r25, Z+35	; 0x23
 508:	96 95       	lsr	r25
 50a:	84 a1       	ldd	r24, Z+36	; 0x24
 50c:	86 95       	lsr	r24
 50e:	8e 5f       	subi	r24, 0xFE	; 254
 510:	89 83       	std	Y+1, r24	; 0x01
 512:	9a 83       	std	Y+2, r25	; 0x02
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	ce 01       	movw	r24, r28
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	0e 94 90 00 	call	0x120	; 0x120 <set_cell>
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	9a 81       	ldd	r25, Y+2	; 0x02
 522:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <snake+0x49>
 526:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <snake+0x48>
 52a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <place_food>
 52e:	8b e8       	ldi	r24, 0x8B	; 139
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 6a 00 	call	0xd4	; 0xd4 <handle_keypress>
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	08 95       	ret

00000544 <__vector_1>:
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	8f 93       	push	r24
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 556:	8f 91       	pop	r24
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_2>:
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	8f 93       	push	r24
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 574:	8f 91       	pop	r24
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <__vector_4>:
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	8f 93       	push	r24
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 592:	8f 91       	pop	r24
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <__vector_3>:
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	8f 93       	push	r24
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 5b0:	8f 91       	pop	r24
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <init_matrix>:
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	87 b9       	out	0x07, r24	; 7
 5c0:	8f e7       	ldi	r24, 0x7F	; 127
 5c2:	84 b9       	out	0x04, r24	; 4
 5c4:	1a b8       	out	0x0a, r1	; 10
 5c6:	08 95       	ret

000005c8 <any_pressed>:
bool any_pressed(void)
{
	return PIND & (UP | DOWN | LEFT | RIGHT);
 5c8:	99 b1       	in	r25, 0x09	; 9
 5ca:	9c 79       	andi	r25, 0x9C	; 156
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <any_pressed+0xa>
 5d0:	80 e0       	ldi	r24, 0x00	; 0
}
 5d2:	08 95       	ret

000005d4 <render>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////------------------>RENDER GAME///////////////////////////////////////////////
void render(int repetitions)
{
 5d4:	7f 92       	push	r7
 5d6:	8f 92       	push	r8
 5d8:	9f 92       	push	r9
 5da:	af 92       	push	r10
 5dc:	bf 92       	push	r11
 5de:	cf 92       	push	r12
 5e0:	df 92       	push	r13
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <render+0x1c>
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	4c 01       	movw	r8, r24
	while(repetitions--) //it only displays correctly when multiplexing repeatedly
	{
		const struct World *world = get_world();
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
 5f6:	0f 2e       	mov	r0, r31
 5f8:	f5 e6       	ldi	r31, 0x65	; 101
 5fa:	af 2e       	mov	r10, r31
 5fc:	f1 e0       	ldi	r31, 0x01	; 1
 5fe:	bf 2e       	mov	r11, r31
 600:	f0 2d       	mov	r31, r0
			uint8_t data = 0;
			for(row = 0; row < world->height; row++)
			{
				struct Position cell = {.x = col, .y = row};
				if(cell_at(&cell) != EMPTY)
				data |= 1 << row;
 602:	cc 24       	eor	r12, r12
 604:	c3 94       	inc	r12
 606:	d1 2c       	mov	r13, r1
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////------------------>RENDER GAME///////////////////////////////////////////////
void render(int repetitions)
{
	while(repetitions--) //it only displays correctly when multiplexing repeatedly
 608:	2e c0       	rjmp	.+92     	; 0x666 <render+0x92>
		const struct World *world = get_world();
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
		{
			uint8_t data = 0;
			for(row = 0; row < world->height; row++)
 60a:	00 e0       	ldi	r16, 0x00	; 0
 60c:	10 e0       	ldi	r17, 0x00	; 0
 60e:	71 2c       	mov	r7, r1
			{
				struct Position cell = {.x = col, .y = row};
 610:	f9 82       	std	Y+1, r15	; 0x01
 612:	0a 83       	std	Y+2, r16	; 0x02
				if(cell_at(&cell) != EMPTY)
 614:	ce 01       	movw	r24, r28
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <cell_at>
 61c:	88 23       	and	r24, r24
 61e:	41 f0       	breq	.+16     	; 0x630 <render+0x5c>
				data |= 1 << row;
 620:	c6 01       	movw	r24, r12
 622:	00 2e       	mov	r0, r16
 624:	02 c0       	rjmp	.+4      	; 0x62a <render+0x56>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	0a 94       	dec	r0
 62c:	e2 f7       	brpl	.-8      	; 0x626 <render+0x52>
 62e:	78 2a       	or	r7, r24
 630:	0f 5f       	subi	r16, 0xFF	; 255
 632:	1f 4f       	sbci	r17, 0xFF	; 255
		const struct World *world = get_world();
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
		{
			uint8_t data = 0;
			for(row = 0; row < world->height; row++)
 634:	0e 15       	cp	r16, r14
 636:	60 f3       	brcs	.-40     	; 0x610 <render+0x3c>
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 638:	c6 01       	movw	r24, r12
 63a:	0f 2c       	mov	r0, r15
 63c:	02 c0       	rjmp	.+4      	; 0x642 <render+0x6e>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	0a 94       	dec	r0
 644:	e2 f7       	brpl	.-8      	; 0x63e <render+0x6a>
 646:	80 95       	com	r24
 648:	85 b9       	out	0x05, r24	; 5
	PORTC = data;
 64a:	78 b8       	out	0x08, r7	; 8
{
	while(repetitions--) //it only displays correctly when multiplexing repeatedly
	{
		const struct World *world = get_world();
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
 64c:	f3 94       	inc	r15
 64e:	f5 01       	movw	r30, r10
 650:	84 a1       	ldd	r24, Z+36	; 0x24
 652:	f8 16       	cp	r15, r24
 654:	10 f0       	brcs	.+4      	; 0x65a <render+0x86>
 656:	07 c0       	rjmp	.+14     	; 0x666 <render+0x92>
 658:	f1 2c       	mov	r15, r1
		{
			uint8_t data = 0;
			for(row = 0; row < world->height; row++)
 65a:	f5 01       	movw	r30, r10
 65c:	e3 a0       	ldd	r14, Z+35	; 0x23
 65e:	e1 10       	cpse	r14, r1
 660:	d4 cf       	rjmp	.-88     	; 0x60a <render+0x36>
 662:	71 2c       	mov	r7, r1
 664:	e9 cf       	rjmp	.-46     	; 0x638 <render+0x64>
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////------------------>RENDER GAME///////////////////////////////////////////////
void render(int repetitions)
{
	while(repetitions--) //it only displays correctly when multiplexing repeatedly
 666:	f1 e0       	ldi	r31, 0x01	; 1
 668:	8f 1a       	sub	r8, r31
 66a:	91 08       	sbc	r9, r1
 66c:	28 f0       	brcs	.+10     	; 0x678 <render+0xa4>
	{
		const struct World *world = get_world();
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
 66e:	f5 01       	movw	r30, r10
 670:	84 a1       	ldd	r24, Z+36	; 0x24
 672:	81 11       	cpse	r24, r1
 674:	f1 cf       	rjmp	.-30     	; 0x658 <render+0x84>
 676:	f7 cf       	rjmp	.-18     	; 0x666 <render+0x92>
				data |= 1 << row;
			}
			write_column(data, col);
		}
	}
}
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	df 90       	pop	r13
 68a:	cf 90       	pop	r12
 68c:	bf 90       	pop	r11
 68e:	af 90       	pop	r10
 690:	9f 90       	pop	r9
 692:	8f 90       	pop	r8
 694:	7f 90       	pop	r7
 696:	08 95       	ret

00000698 <main>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////------------------>MAIN//////////////////////////////////////////////////////
int main(void)
{
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	00 d0       	rcall	.+0      	; 0x69e <main+0x6>
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
	init_game();
 6a2:	0e 94 44 02 	call	0x488	; 0x488 <init_game>
{
	return world.state;
}
void set_state(enum State state)
{
	world.state = state;
 6a6:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <world+0x25>
/////////////////////////////------------------>MAIN//////////////////////////////////////////////////////
int main(void)
{
	init_game();
	set_state(GAME);
	struct Position direction = {.x = 0, .y = 1};
 6aa:	19 82       	std	Y+1, r1	; 0x01
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	8a 83       	std	Y+2, r24	; 0x02
	init_matrix();
 6b0:	0e 94 de 02 	call	0x5bc	; 0x5bc <init_matrix>
	init_interrupts();
 6b4:	0e 94 53 00 	call	0xa6	; 0xa6 <init_interrupts>
	uint8_t tick_interval = 10;
 6b8:	1a e0       	ldi	r17, 0x0A	; 10
	}
	snake.tail = tail;
}
enum State get_state(void)
{
	return world.state;
 6ba:	0f 2e       	mov	r0, r31
 6bc:	f5 e6       	ldi	r31, 0x65	; 101
 6be:	ef 2e       	mov	r14, r31
 6c0:	f1 e0       	ldi	r31, 0x01	; 1
 6c2:	ff 2e       	mov	r15, r31
 6c4:	f0 2d       	mov	r31, r0
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6c6:	0f 2e       	mov	r0, r31
 6c8:	fe ef       	ldi	r31, 0xFE	; 254
 6ca:	5f 2e       	mov	r5, r31
 6cc:	f0 2d       	mov	r31, r0
	PORTC = data;
 6ce:	0f ef       	ldi	r16, 0xFF	; 255
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6d0:	0f 2e       	mov	r0, r31
 6d2:	fd ef       	ldi	r31, 0xFD	; 253
 6d4:	6f 2e       	mov	r6, r31
 6d6:	f0 2d       	mov	r31, r0
 6d8:	0f 2e       	mov	r0, r31
 6da:	fb ef       	ldi	r31, 0xFB	; 251
 6dc:	7f 2e       	mov	r7, r31
 6de:	f0 2d       	mov	r31, r0
 6e0:	0f 2e       	mov	r0, r31
 6e2:	f7 ef       	ldi	r31, 0xF7	; 247
 6e4:	8f 2e       	mov	r8, r31
 6e6:	f0 2d       	mov	r31, r0
 6e8:	0f 2e       	mov	r0, r31
 6ea:	ff ee       	ldi	r31, 0xEF	; 239
 6ec:	9f 2e       	mov	r9, r31
 6ee:	f0 2d       	mov	r31, r0
 6f0:	0f 2e       	mov	r0, r31
 6f2:	ff ed       	ldi	r31, 0xDF	; 223
 6f4:	af 2e       	mov	r10, r31
 6f6:	f0 2d       	mov	r31, r0
 6f8:	0f 2e       	mov	r0, r31
 6fa:	ff eb       	ldi	r31, 0xBF	; 191
 6fc:	bf 2e       	mov	r11, r31
 6fe:	f0 2d       	mov	r31, r0
 700:	0f 2e       	mov	r0, r31
 702:	ff e7       	ldi	r31, 0x7F	; 127
 704:	cf 2e       	mov	r12, r31
 706:	f0 2d       	mov	r31, r0
				direction.x = -1;
				direction.y = 0;
			}
			else if(button_g == 4)
			{
				direction.x = 1;
 708:	dd 24       	eor	r13, r13
 70a:	d3 94       	inc	r13
 70c:	01 c0       	rjmp	.+2      	; 0x710 <main+0x78>
			handle_keypress(&direction);
			/* pin change interrupt end */
			//this should be put in a timer interrupt
			render(5);
			_delay_ms(8);
			if(tick_interval-- == 0)
 70e:	11 50       	subi	r17, 0x01	; 1
	}
	snake.tail = tail;
}
enum State get_state(void)
{
	return world.state;
 710:	f7 01       	movw	r30, r14
 712:	85 a1       	ldd	r24, Z+37	; 0x25
	init_matrix();
	init_interrupts();
	uint8_t tick_interval = 10;
	for(;;)
	{
		if(get_state() == GAME)
 714:	81 11       	cpse	r24, r1
 716:	2f c0       	rjmp	.+94     	; 0x776 <main+0xde>
		{
			/* this should be put in a PCINT interrupt vector*/
			if(button_g == 1)
 718:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	19 f4       	brne	.+6      	; 0x726 <main+0x8e>
			{
				direction.x = 0;
 720:	19 82       	std	Y+1, r1	; 0x01
				direction.y = -1;
 722:	0a 83       	std	Y+2, r16	; 0x02
 724:	14 c0       	rjmp	.+40     	; 0x74e <main+0xb6>
			}
			else if(button_g == 2)
 726:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 72a:	82 30       	cpi	r24, 0x02	; 2
 72c:	19 f4       	brne	.+6      	; 0x734 <main+0x9c>
			{
				direction.x = 0;
 72e:	19 82       	std	Y+1, r1	; 0x01
				direction.y = 1;
 730:	da 82       	std	Y+2, r13	; 0x02
 732:	0d c0       	rjmp	.+26     	; 0x74e <main+0xb6>
			}
			else if(button_g == 3)
 734:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 738:	83 30       	cpi	r24, 0x03	; 3
 73a:	19 f4       	brne	.+6      	; 0x742 <main+0xaa>
			{
				direction.x = -1;
 73c:	09 83       	std	Y+1, r16	; 0x01
				direction.y = 0;
 73e:	1a 82       	std	Y+2, r1	; 0x02
 740:	06 c0       	rjmp	.+12     	; 0x74e <main+0xb6>
			}
			else if(button_g == 4)
 742:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 746:	84 30       	cpi	r24, 0x04	; 4
 748:	11 f4       	brne	.+4      	; 0x74e <main+0xb6>
			{
				direction.x = 1;
 74a:	d9 82       	std	Y+1, r13	; 0x01
				direction.y = 0;
 74c:	1a 82       	std	Y+2, r1	; 0x02
			}
			handle_keypress(&direction);
 74e:	ce 01       	movw	r24, r28
 750:	01 96       	adiw	r24, 0x01	; 1
 752:	0e 94 6a 00 	call	0xd4	; 0xd4 <handle_keypress>
			/* pin change interrupt end */
			//this should be put in a timer interrupt
			render(5);
 756:	85 e0       	ldi	r24, 0x05	; 5
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 75e:	8f ec       	ldi	r24, 0xCF	; 207
 760:	97 e0       	ldi	r25, 0x07	; 7
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <main+0xca>
 766:	00 c0       	rjmp	.+0      	; 0x768 <main+0xd0>
 768:	00 00       	nop
			_delay_ms(8);
			if(tick_interval-- == 0)
 76a:	11 11       	cpse	r17, r1
 76c:	d0 cf       	rjmp	.-96     	; 0x70e <main+0x76>
			{
				tick_interval = 10;
				tick();
 76e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <tick>
			//this should be put in a timer interrupt
			render(5);
			_delay_ms(8);
			if(tick_interval-- == 0)
			{
				tick_interval = 10;
 772:	1a e0       	ldi	r17, 0x0A	; 10
 774:	cd cf       	rjmp	.-102    	; 0x710 <main+0x78>
				tick();
			}
		}
		else if(get_state() == MENU)
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	59 f6       	brne	.-106    	; 0x710 <main+0x78>
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 77a:	55 b8       	out	0x05, r5	; 5
	PORTC = data;
 77c:	08 b9       	out	0x08, r16	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 77e:	65 b8       	out	0x05, r6	; 5
	PORTC = data;
 780:	08 b9       	out	0x08, r16	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 782:	75 b8       	out	0x05, r7	; 5
	PORTC = data;
 784:	08 b9       	out	0x08, r16	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 786:	85 b8       	out	0x05, r8	; 5
	PORTC = data;
 788:	08 b9       	out	0x08, r16	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 78a:	95 b8       	out	0x05, r9	; 5
	PORTC = data;
 78c:	08 b9       	out	0x08, r16	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 78e:	a5 b8       	out	0x05, r10	; 5
	PORTC = data;
 790:	08 b9       	out	0x08, r16	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 792:	b5 b8       	out	0x05, r11	; 5
	PORTC = data;
 794:	08 b9       	out	0x08, r16	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 796:	c5 b8       	out	0x05, r12	; 5
	PORTC = data;
 798:	08 b9       	out	0x08, r16	; 8
			write_column(0xFF, 3);
			write_column(0xFF, 4);
			write_column(0xFF, 5);
			write_column(0xFF, 6);
			write_column(0xFF, 7);
			if(any_pressed())
 79a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <any_pressed>
 79e:	88 23       	and	r24, r24
 7a0:	09 f4       	brne	.+2      	; 0x7a4 <main+0x10c>
 7a2:	b6 cf       	rjmp	.-148    	; 0x710 <main+0x78>
{
	return world.state;
}
void set_state(enum State state)
{
	world.state = state;
 7a4:	f7 01       	movw	r30, r14
 7a6:	15 a2       	std	Z+37, r1	; 0x25
			write_column(0xFF, 6);
			write_column(0xFF, 7);
			if(any_pressed())
			{
				set_state(GAME);
				init_game();
 7a8:	0e 94 44 02 	call	0x488	; 0x488 <init_game>
 7ac:	b1 cf       	rjmp	.-158    	; 0x710 <main+0x78>

000007ae <__divmodhi4>:
 7ae:	97 fb       	bst	r25, 7
 7b0:	07 2e       	mov	r0, r23
 7b2:	16 f4       	brtc	.+4      	; 0x7b8 <__divmodhi4+0xa>
 7b4:	00 94       	com	r0
 7b6:	07 d0       	rcall	.+14     	; 0x7c6 <__divmodhi4_neg1>
 7b8:	77 fd       	sbrc	r23, 7
 7ba:	09 d0       	rcall	.+18     	; 0x7ce <__divmodhi4_neg2>
 7bc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__udivmodhi4>
 7c0:	07 fc       	sbrc	r0, 7
 7c2:	05 d0       	rcall	.+10     	; 0x7ce <__divmodhi4_neg2>
 7c4:	3e f4       	brtc	.+14     	; 0x7d4 <__divmodhi4_exit>

000007c6 <__divmodhi4_neg1>:
 7c6:	90 95       	com	r25
 7c8:	81 95       	neg	r24
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	08 95       	ret

000007ce <__divmodhi4_neg2>:
 7ce:	70 95       	com	r23
 7d0:	61 95       	neg	r22
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255

000007d4 <__divmodhi4_exit>:
 7d4:	08 95       	ret

000007d6 <__udivmodhi4>:
 7d6:	aa 1b       	sub	r26, r26
 7d8:	bb 1b       	sub	r27, r27
 7da:	51 e1       	ldi	r21, 0x11	; 17
 7dc:	07 c0       	rjmp	.+14     	; 0x7ec <__udivmodhi4_ep>

000007de <__udivmodhi4_loop>:
 7de:	aa 1f       	adc	r26, r26
 7e0:	bb 1f       	adc	r27, r27
 7e2:	a6 17       	cp	r26, r22
 7e4:	b7 07       	cpc	r27, r23
 7e6:	10 f0       	brcs	.+4      	; 0x7ec <__udivmodhi4_ep>
 7e8:	a6 1b       	sub	r26, r22
 7ea:	b7 0b       	sbc	r27, r23

000007ec <__udivmodhi4_ep>:
 7ec:	88 1f       	adc	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	5a 95       	dec	r21
 7f2:	a9 f7       	brne	.-22     	; 0x7de <__udivmodhi4_loop>
 7f4:	80 95       	com	r24
 7f6:	90 95       	com	r25
 7f8:	bc 01       	movw	r22, r24
 7fa:	cd 01       	movw	r24, r26
 7fc:	08 95       	ret

000007fe <do_rand>:
 7fe:	8f 92       	push	r8
 800:	9f 92       	push	r9
 802:	af 92       	push	r10
 804:	bf 92       	push	r11
 806:	cf 92       	push	r12
 808:	df 92       	push	r13
 80a:	ef 92       	push	r14
 80c:	ff 92       	push	r15
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	ec 01       	movw	r28, r24
 814:	68 81       	ld	r22, Y
 816:	79 81       	ldd	r23, Y+1	; 0x01
 818:	8a 81       	ldd	r24, Y+2	; 0x02
 81a:	9b 81       	ldd	r25, Y+3	; 0x03
 81c:	61 15       	cp	r22, r1
 81e:	71 05       	cpc	r23, r1
 820:	81 05       	cpc	r24, r1
 822:	91 05       	cpc	r25, r1
 824:	21 f4       	brne	.+8      	; 0x82e <do_rand+0x30>
 826:	64 e2       	ldi	r22, 0x24	; 36
 828:	79 ed       	ldi	r23, 0xD9	; 217
 82a:	8b e5       	ldi	r24, 0x5B	; 91
 82c:	97 e0       	ldi	r25, 0x07	; 7
 82e:	2d e1       	ldi	r18, 0x1D	; 29
 830:	33 ef       	ldi	r19, 0xF3	; 243
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	50 e0       	ldi	r21, 0x00	; 0
 836:	0e 94 02 07 	call	0xe04	; 0xe04 <__divmodsi4>
 83a:	49 01       	movw	r8, r18
 83c:	5a 01       	movw	r10, r20
 83e:	9b 01       	movw	r18, r22
 840:	ac 01       	movw	r20, r24
 842:	a7 ea       	ldi	r26, 0xA7	; 167
 844:	b1 e4       	ldi	r27, 0x41	; 65
 846:	0e 94 21 07 	call	0xe42	; 0xe42 <__muluhisi3>
 84a:	6b 01       	movw	r12, r22
 84c:	7c 01       	movw	r14, r24
 84e:	ac ee       	ldi	r26, 0xEC	; 236
 850:	b4 ef       	ldi	r27, 0xF4	; 244
 852:	a5 01       	movw	r20, r10
 854:	94 01       	movw	r18, r8
 856:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__mulohisi3>
 85a:	dc 01       	movw	r26, r24
 85c:	cb 01       	movw	r24, r22
 85e:	8c 0d       	add	r24, r12
 860:	9d 1d       	adc	r25, r13
 862:	ae 1d       	adc	r26, r14
 864:	bf 1d       	adc	r27, r15
 866:	b7 ff       	sbrs	r27, 7
 868:	03 c0       	rjmp	.+6      	; 0x870 <do_rand+0x72>
 86a:	01 97       	sbiw	r24, 0x01	; 1
 86c:	a1 09       	sbc	r26, r1
 86e:	b0 48       	sbci	r27, 0x80	; 128
 870:	88 83       	st	Y, r24
 872:	99 83       	std	Y+1, r25	; 0x01
 874:	aa 83       	std	Y+2, r26	; 0x02
 876:	bb 83       	std	Y+3, r27	; 0x03
 878:	9f 77       	andi	r25, 0x7F	; 127
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	ff 90       	pop	r15
 880:	ef 90       	pop	r14
 882:	df 90       	pop	r13
 884:	cf 90       	pop	r12
 886:	bf 90       	pop	r11
 888:	af 90       	pop	r10
 88a:	9f 90       	pop	r9
 88c:	8f 90       	pop	r8
 88e:	08 95       	ret

00000890 <rand_r>:
 890:	0e 94 ff 03 	call	0x7fe	; 0x7fe <do_rand>
 894:	08 95       	ret

00000896 <rand>:
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <do_rand>
 89e:	08 95       	ret

000008a0 <srand>:
 8a0:	a0 e0       	ldi	r26, 0x00	; 0
 8a2:	b0 e0       	ldi	r27, 0x00	; 0
 8a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 8ac:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 8b0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 8b4:	08 95       	ret

000008b6 <printf>:
 8b6:	a0 e0       	ldi	r26, 0x00	; 0
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e1 e6       	ldi	r30, 0x61	; 97
 8bc:	f4 e0       	ldi	r31, 0x04	; 4
 8be:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__prologue_saves__+0x20>
 8c2:	ae 01       	movw	r20, r28
 8c4:	4b 5f       	subi	r20, 0xFB	; 251
 8c6:	5f 4f       	sbci	r21, 0xFF	; 255
 8c8:	fa 01       	movw	r30, r20
 8ca:	61 91       	ld	r22, Z+
 8cc:	71 91       	ld	r23, Z+
 8ce:	af 01       	movw	r20, r30
 8d0:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <__iob+0x2>
 8d4:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <__iob+0x3>
 8d8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <vfprintf>
 8dc:	e2 e0       	ldi	r30, 0x02	; 2
 8de:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__epilogue_restores__+0x20>

000008e2 <vfprintf>:
 8e2:	ab e0       	ldi	r26, 0x0B	; 11
 8e4:	b0 e0       	ldi	r27, 0x00	; 0
 8e6:	e7 e7       	ldi	r30, 0x77	; 119
 8e8:	f4 e0       	ldi	r31, 0x04	; 4
 8ea:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__prologue_saves__>
 8ee:	6c 01       	movw	r12, r24
 8f0:	7b 01       	movw	r14, r22
 8f2:	8a 01       	movw	r16, r20
 8f4:	fc 01       	movw	r30, r24
 8f6:	17 82       	std	Z+7, r1	; 0x07
 8f8:	16 82       	std	Z+6, r1	; 0x06
 8fa:	83 81       	ldd	r24, Z+3	; 0x03
 8fc:	81 ff       	sbrs	r24, 1
 8fe:	cc c1       	rjmp	.+920    	; 0xc98 <__stack+0x399>
 900:	ce 01       	movw	r24, r28
 902:	01 96       	adiw	r24, 0x01	; 1
 904:	3c 01       	movw	r6, r24
 906:	f6 01       	movw	r30, r12
 908:	93 81       	ldd	r25, Z+3	; 0x03
 90a:	f7 01       	movw	r30, r14
 90c:	93 fd       	sbrc	r25, 3
 90e:	85 91       	lpm	r24, Z+
 910:	93 ff       	sbrs	r25, 3
 912:	81 91       	ld	r24, Z+
 914:	7f 01       	movw	r14, r30
 916:	88 23       	and	r24, r24
 918:	09 f4       	brne	.+2      	; 0x91c <__stack+0x1d>
 91a:	ba c1       	rjmp	.+884    	; 0xc90 <__stack+0x391>
 91c:	85 32       	cpi	r24, 0x25	; 37
 91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0x2f>
 920:	93 fd       	sbrc	r25, 3
 922:	85 91       	lpm	r24, Z+
 924:	93 ff       	sbrs	r25, 3
 926:	81 91       	ld	r24, Z+
 928:	7f 01       	movw	r14, r30
 92a:	85 32       	cpi	r24, 0x25	; 37
 92c:	29 f4       	brne	.+10     	; 0x938 <__stack+0x39>
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 936:	e7 cf       	rjmp	.-50     	; 0x906 <__stack+0x7>
 938:	91 2c       	mov	r9, r1
 93a:	21 2c       	mov	r2, r1
 93c:	31 2c       	mov	r3, r1
 93e:	ff e1       	ldi	r31, 0x1F	; 31
 940:	f3 15       	cp	r31, r3
 942:	d8 f0       	brcs	.+54     	; 0x97a <__stack+0x7b>
 944:	8b 32       	cpi	r24, 0x2B	; 43
 946:	79 f0       	breq	.+30     	; 0x966 <__stack+0x67>
 948:	38 f4       	brcc	.+14     	; 0x958 <__stack+0x59>
 94a:	80 32       	cpi	r24, 0x20	; 32
 94c:	79 f0       	breq	.+30     	; 0x96c <__stack+0x6d>
 94e:	83 32       	cpi	r24, 0x23	; 35
 950:	a1 f4       	brne	.+40     	; 0x97a <__stack+0x7b>
 952:	23 2d       	mov	r18, r3
 954:	20 61       	ori	r18, 0x10	; 16
 956:	1d c0       	rjmp	.+58     	; 0x992 <__stack+0x93>
 958:	8d 32       	cpi	r24, 0x2D	; 45
 95a:	61 f0       	breq	.+24     	; 0x974 <__stack+0x75>
 95c:	80 33       	cpi	r24, 0x30	; 48
 95e:	69 f4       	brne	.+26     	; 0x97a <__stack+0x7b>
 960:	23 2d       	mov	r18, r3
 962:	21 60       	ori	r18, 0x01	; 1
 964:	16 c0       	rjmp	.+44     	; 0x992 <__stack+0x93>
 966:	83 2d       	mov	r24, r3
 968:	82 60       	ori	r24, 0x02	; 2
 96a:	38 2e       	mov	r3, r24
 96c:	e3 2d       	mov	r30, r3
 96e:	e4 60       	ori	r30, 0x04	; 4
 970:	3e 2e       	mov	r3, r30
 972:	2a c0       	rjmp	.+84     	; 0x9c8 <__stack+0xc9>
 974:	f3 2d       	mov	r31, r3
 976:	f8 60       	ori	r31, 0x08	; 8
 978:	1d c0       	rjmp	.+58     	; 0x9b4 <__stack+0xb5>
 97a:	37 fc       	sbrc	r3, 7
 97c:	2d c0       	rjmp	.+90     	; 0x9d8 <__stack+0xd9>
 97e:	20 ed       	ldi	r18, 0xD0	; 208
 980:	28 0f       	add	r18, r24
 982:	2a 30       	cpi	r18, 0x0A	; 10
 984:	40 f0       	brcs	.+16     	; 0x996 <__stack+0x97>
 986:	8e 32       	cpi	r24, 0x2E	; 46
 988:	b9 f4       	brne	.+46     	; 0x9b8 <__stack+0xb9>
 98a:	36 fc       	sbrc	r3, 6
 98c:	81 c1       	rjmp	.+770    	; 0xc90 <__stack+0x391>
 98e:	23 2d       	mov	r18, r3
 990:	20 64       	ori	r18, 0x40	; 64
 992:	32 2e       	mov	r3, r18
 994:	19 c0       	rjmp	.+50     	; 0x9c8 <__stack+0xc9>
 996:	36 fe       	sbrs	r3, 6
 998:	06 c0       	rjmp	.+12     	; 0x9a6 <__stack+0xa7>
 99a:	8a e0       	ldi	r24, 0x0A	; 10
 99c:	98 9e       	mul	r9, r24
 99e:	20 0d       	add	r18, r0
 9a0:	11 24       	eor	r1, r1
 9a2:	92 2e       	mov	r9, r18
 9a4:	11 c0       	rjmp	.+34     	; 0x9c8 <__stack+0xc9>
 9a6:	ea e0       	ldi	r30, 0x0A	; 10
 9a8:	2e 9e       	mul	r2, r30
 9aa:	20 0d       	add	r18, r0
 9ac:	11 24       	eor	r1, r1
 9ae:	22 2e       	mov	r2, r18
 9b0:	f3 2d       	mov	r31, r3
 9b2:	f0 62       	ori	r31, 0x20	; 32
 9b4:	3f 2e       	mov	r3, r31
 9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <__stack+0xc9>
 9b8:	8c 36       	cpi	r24, 0x6C	; 108
 9ba:	21 f4       	brne	.+8      	; 0x9c4 <__stack+0xc5>
 9bc:	83 2d       	mov	r24, r3
 9be:	80 68       	ori	r24, 0x80	; 128
 9c0:	38 2e       	mov	r3, r24
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>
 9c4:	88 36       	cpi	r24, 0x68	; 104
 9c6:	41 f4       	brne	.+16     	; 0x9d8 <__stack+0xd9>
 9c8:	f7 01       	movw	r30, r14
 9ca:	93 fd       	sbrc	r25, 3
 9cc:	85 91       	lpm	r24, Z+
 9ce:	93 ff       	sbrs	r25, 3
 9d0:	81 91       	ld	r24, Z+
 9d2:	7f 01       	movw	r14, r30
 9d4:	81 11       	cpse	r24, r1
 9d6:	b3 cf       	rjmp	.-154    	; 0x93e <__stack+0x3f>
 9d8:	98 2f       	mov	r25, r24
 9da:	9f 7d       	andi	r25, 0xDF	; 223
 9dc:	95 54       	subi	r25, 0x45	; 69
 9de:	93 30       	cpi	r25, 0x03	; 3
 9e0:	28 f4       	brcc	.+10     	; 0x9ec <__stack+0xed>
 9e2:	0c 5f       	subi	r16, 0xFC	; 252
 9e4:	1f 4f       	sbci	r17, 0xFF	; 255
 9e6:	9f e3       	ldi	r25, 0x3F	; 63
 9e8:	99 83       	std	Y+1, r25	; 0x01
 9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__stack+0x107>
 9ec:	83 36       	cpi	r24, 0x63	; 99
 9ee:	31 f0       	breq	.+12     	; 0x9fc <__stack+0xfd>
 9f0:	83 37       	cpi	r24, 0x73	; 115
 9f2:	71 f0       	breq	.+28     	; 0xa10 <__stack+0x111>
 9f4:	83 35       	cpi	r24, 0x53	; 83
 9f6:	09 f0       	breq	.+2      	; 0x9fa <__stack+0xfb>
 9f8:	59 c0       	rjmp	.+178    	; 0xaac <__stack+0x1ad>
 9fa:	21 c0       	rjmp	.+66     	; 0xa3e <__stack+0x13f>
 9fc:	f8 01       	movw	r30, r16
 9fe:	80 81       	ld	r24, Z
 a00:	89 83       	std	Y+1, r24	; 0x01
 a02:	0e 5f       	subi	r16, 0xFE	; 254
 a04:	1f 4f       	sbci	r17, 0xFF	; 255
 a06:	88 24       	eor	r8, r8
 a08:	83 94       	inc	r8
 a0a:	91 2c       	mov	r9, r1
 a0c:	53 01       	movw	r10, r6
 a0e:	13 c0       	rjmp	.+38     	; 0xa36 <__stack+0x137>
 a10:	28 01       	movw	r4, r16
 a12:	f2 e0       	ldi	r31, 0x02	; 2
 a14:	4f 0e       	add	r4, r31
 a16:	51 1c       	adc	r5, r1
 a18:	f8 01       	movw	r30, r16
 a1a:	a0 80       	ld	r10, Z
 a1c:	b1 80       	ldd	r11, Z+1	; 0x01
 a1e:	36 fe       	sbrs	r3, 6
 a20:	03 c0       	rjmp	.+6      	; 0xa28 <__stack+0x129>
 a22:	69 2d       	mov	r22, r9
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <__stack+0x12d>
 a28:	6f ef       	ldi	r22, 0xFF	; 255
 a2a:	7f ef       	ldi	r23, 0xFF	; 255
 a2c:	c5 01       	movw	r24, r10
 a2e:	0e 94 5d 06 	call	0xcba	; 0xcba <strnlen>
 a32:	4c 01       	movw	r8, r24
 a34:	82 01       	movw	r16, r4
 a36:	f3 2d       	mov	r31, r3
 a38:	ff 77       	andi	r31, 0x7F	; 127
 a3a:	3f 2e       	mov	r3, r31
 a3c:	16 c0       	rjmp	.+44     	; 0xa6a <__stack+0x16b>
 a3e:	28 01       	movw	r4, r16
 a40:	22 e0       	ldi	r18, 0x02	; 2
 a42:	42 0e       	add	r4, r18
 a44:	51 1c       	adc	r5, r1
 a46:	f8 01       	movw	r30, r16
 a48:	a0 80       	ld	r10, Z
 a4a:	b1 80       	ldd	r11, Z+1	; 0x01
 a4c:	36 fe       	sbrs	r3, 6
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <__stack+0x157>
 a50:	69 2d       	mov	r22, r9
 a52:	70 e0       	ldi	r23, 0x00	; 0
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <__stack+0x15b>
 a56:	6f ef       	ldi	r22, 0xFF	; 255
 a58:	7f ef       	ldi	r23, 0xFF	; 255
 a5a:	c5 01       	movw	r24, r10
 a5c:	0e 94 52 06 	call	0xca4	; 0xca4 <strnlen_P>
 a60:	4c 01       	movw	r8, r24
 a62:	f3 2d       	mov	r31, r3
 a64:	f0 68       	ori	r31, 0x80	; 128
 a66:	3f 2e       	mov	r3, r31
 a68:	82 01       	movw	r16, r4
 a6a:	33 fc       	sbrc	r3, 3
 a6c:	1b c0       	rjmp	.+54     	; 0xaa4 <__stack+0x1a5>
 a6e:	82 2d       	mov	r24, r2
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	88 16       	cp	r8, r24
 a74:	99 06       	cpc	r9, r25
 a76:	b0 f4       	brcc	.+44     	; 0xaa4 <__stack+0x1a5>
 a78:	b6 01       	movw	r22, r12
 a7a:	80 e2       	ldi	r24, 0x20	; 32
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 a82:	2a 94       	dec	r2
 a84:	f4 cf       	rjmp	.-24     	; 0xa6e <__stack+0x16f>
 a86:	f5 01       	movw	r30, r10
 a88:	37 fc       	sbrc	r3, 7
 a8a:	85 91       	lpm	r24, Z+
 a8c:	37 fe       	sbrs	r3, 7
 a8e:	81 91       	ld	r24, Z+
 a90:	5f 01       	movw	r10, r30
 a92:	b6 01       	movw	r22, r12
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 a9a:	21 10       	cpse	r2, r1
 a9c:	2a 94       	dec	r2
 a9e:	21 e0       	ldi	r18, 0x01	; 1
 aa0:	82 1a       	sub	r8, r18
 aa2:	91 08       	sbc	r9, r1
 aa4:	81 14       	cp	r8, r1
 aa6:	91 04       	cpc	r9, r1
 aa8:	71 f7       	brne	.-36     	; 0xa86 <__stack+0x187>
 aaa:	e8 c0       	rjmp	.+464    	; 0xc7c <__stack+0x37d>
 aac:	84 36       	cpi	r24, 0x64	; 100
 aae:	11 f0       	breq	.+4      	; 0xab4 <__stack+0x1b5>
 ab0:	89 36       	cpi	r24, 0x69	; 105
 ab2:	41 f5       	brne	.+80     	; 0xb04 <__stack+0x205>
 ab4:	f8 01       	movw	r30, r16
 ab6:	37 fe       	sbrs	r3, 7
 ab8:	07 c0       	rjmp	.+14     	; 0xac8 <__stack+0x1c9>
 aba:	60 81       	ld	r22, Z
 abc:	71 81       	ldd	r23, Z+1	; 0x01
 abe:	82 81       	ldd	r24, Z+2	; 0x02
 ac0:	93 81       	ldd	r25, Z+3	; 0x03
 ac2:	0c 5f       	subi	r16, 0xFC	; 252
 ac4:	1f 4f       	sbci	r17, 0xFF	; 255
 ac6:	08 c0       	rjmp	.+16     	; 0xad8 <__stack+0x1d9>
 ac8:	60 81       	ld	r22, Z
 aca:	71 81       	ldd	r23, Z+1	; 0x01
 acc:	07 2e       	mov	r0, r23
 ace:	00 0c       	add	r0, r0
 ad0:	88 0b       	sbc	r24, r24
 ad2:	99 0b       	sbc	r25, r25
 ad4:	0e 5f       	subi	r16, 0xFE	; 254
 ad6:	1f 4f       	sbci	r17, 0xFF	; 255
 ad8:	f3 2d       	mov	r31, r3
 ada:	ff 76       	andi	r31, 0x6F	; 111
 adc:	3f 2e       	mov	r3, r31
 ade:	97 ff       	sbrs	r25, 7
 ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <__stack+0x1f5>
 ae2:	90 95       	com	r25
 ae4:	80 95       	com	r24
 ae6:	70 95       	com	r23
 ae8:	61 95       	neg	r22
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	f0 68       	ori	r31, 0x80	; 128
 af2:	3f 2e       	mov	r3, r31
 af4:	2a e0       	ldi	r18, 0x0A	; 10
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	a3 01       	movw	r20, r6
 afa:	0e 94 a4 06 	call	0xd48	; 0xd48 <__ultoa_invert>
 afe:	88 2e       	mov	r8, r24
 b00:	86 18       	sub	r8, r6
 b02:	45 c0       	rjmp	.+138    	; 0xb8e <__stack+0x28f>
 b04:	85 37       	cpi	r24, 0x75	; 117
 b06:	31 f4       	brne	.+12     	; 0xb14 <__stack+0x215>
 b08:	23 2d       	mov	r18, r3
 b0a:	2f 7e       	andi	r18, 0xEF	; 239
 b0c:	b2 2e       	mov	r11, r18
 b0e:	2a e0       	ldi	r18, 0x0A	; 10
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	25 c0       	rjmp	.+74     	; 0xb5e <__stack+0x25f>
 b14:	93 2d       	mov	r25, r3
 b16:	99 7f       	andi	r25, 0xF9	; 249
 b18:	b9 2e       	mov	r11, r25
 b1a:	8f 36       	cpi	r24, 0x6F	; 111
 b1c:	c1 f0       	breq	.+48     	; 0xb4e <__stack+0x24f>
 b1e:	18 f4       	brcc	.+6      	; 0xb26 <__stack+0x227>
 b20:	88 35       	cpi	r24, 0x58	; 88
 b22:	79 f0       	breq	.+30     	; 0xb42 <__stack+0x243>
 b24:	b5 c0       	rjmp	.+362    	; 0xc90 <__stack+0x391>
 b26:	80 37       	cpi	r24, 0x70	; 112
 b28:	19 f0       	breq	.+6      	; 0xb30 <__stack+0x231>
 b2a:	88 37       	cpi	r24, 0x78	; 120
 b2c:	21 f0       	breq	.+8      	; 0xb36 <__stack+0x237>
 b2e:	b0 c0       	rjmp	.+352    	; 0xc90 <__stack+0x391>
 b30:	e9 2f       	mov	r30, r25
 b32:	e0 61       	ori	r30, 0x10	; 16
 b34:	be 2e       	mov	r11, r30
 b36:	b4 fe       	sbrs	r11, 4
 b38:	0d c0       	rjmp	.+26     	; 0xb54 <__stack+0x255>
 b3a:	fb 2d       	mov	r31, r11
 b3c:	f4 60       	ori	r31, 0x04	; 4
 b3e:	bf 2e       	mov	r11, r31
 b40:	09 c0       	rjmp	.+18     	; 0xb54 <__stack+0x255>
 b42:	34 fe       	sbrs	r3, 4
 b44:	0a c0       	rjmp	.+20     	; 0xb5a <__stack+0x25b>
 b46:	29 2f       	mov	r18, r25
 b48:	26 60       	ori	r18, 0x06	; 6
 b4a:	b2 2e       	mov	r11, r18
 b4c:	06 c0       	rjmp	.+12     	; 0xb5a <__stack+0x25b>
 b4e:	28 e0       	ldi	r18, 0x08	; 8
 b50:	30 e0       	ldi	r19, 0x00	; 0
 b52:	05 c0       	rjmp	.+10     	; 0xb5e <__stack+0x25f>
 b54:	20 e1       	ldi	r18, 0x10	; 16
 b56:	30 e0       	ldi	r19, 0x00	; 0
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <__stack+0x25f>
 b5a:	20 e1       	ldi	r18, 0x10	; 16
 b5c:	32 e0       	ldi	r19, 0x02	; 2
 b5e:	f8 01       	movw	r30, r16
 b60:	b7 fe       	sbrs	r11, 7
 b62:	07 c0       	rjmp	.+14     	; 0xb72 <__stack+0x273>
 b64:	60 81       	ld	r22, Z
 b66:	71 81       	ldd	r23, Z+1	; 0x01
 b68:	82 81       	ldd	r24, Z+2	; 0x02
 b6a:	93 81       	ldd	r25, Z+3	; 0x03
 b6c:	0c 5f       	subi	r16, 0xFC	; 252
 b6e:	1f 4f       	sbci	r17, 0xFF	; 255
 b70:	06 c0       	rjmp	.+12     	; 0xb7e <__stack+0x27f>
 b72:	60 81       	ld	r22, Z
 b74:	71 81       	ldd	r23, Z+1	; 0x01
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	0e 5f       	subi	r16, 0xFE	; 254
 b7c:	1f 4f       	sbci	r17, 0xFF	; 255
 b7e:	a3 01       	movw	r20, r6
 b80:	0e 94 a4 06 	call	0xd48	; 0xd48 <__ultoa_invert>
 b84:	88 2e       	mov	r8, r24
 b86:	86 18       	sub	r8, r6
 b88:	fb 2d       	mov	r31, r11
 b8a:	ff 77       	andi	r31, 0x7F	; 127
 b8c:	3f 2e       	mov	r3, r31
 b8e:	36 fe       	sbrs	r3, 6
 b90:	0d c0       	rjmp	.+26     	; 0xbac <__stack+0x2ad>
 b92:	23 2d       	mov	r18, r3
 b94:	2e 7f       	andi	r18, 0xFE	; 254
 b96:	a2 2e       	mov	r10, r18
 b98:	89 14       	cp	r8, r9
 b9a:	58 f4       	brcc	.+22     	; 0xbb2 <__stack+0x2b3>
 b9c:	34 fe       	sbrs	r3, 4
 b9e:	0b c0       	rjmp	.+22     	; 0xbb6 <__stack+0x2b7>
 ba0:	32 fc       	sbrc	r3, 2
 ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <__stack+0x2b7>
 ba4:	83 2d       	mov	r24, r3
 ba6:	8e 7e       	andi	r24, 0xEE	; 238
 ba8:	a8 2e       	mov	r10, r24
 baa:	05 c0       	rjmp	.+10     	; 0xbb6 <__stack+0x2b7>
 bac:	b8 2c       	mov	r11, r8
 bae:	a3 2c       	mov	r10, r3
 bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <__stack+0x2b9>
 bb2:	b8 2c       	mov	r11, r8
 bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <__stack+0x2b9>
 bb6:	b9 2c       	mov	r11, r9
 bb8:	a4 fe       	sbrs	r10, 4
 bba:	0f c0       	rjmp	.+30     	; 0xbda <__stack+0x2db>
 bbc:	fe 01       	movw	r30, r28
 bbe:	e8 0d       	add	r30, r8
 bc0:	f1 1d       	adc	r31, r1
 bc2:	80 81       	ld	r24, Z
 bc4:	80 33       	cpi	r24, 0x30	; 48
 bc6:	21 f4       	brne	.+8      	; 0xbd0 <__stack+0x2d1>
 bc8:	9a 2d       	mov	r25, r10
 bca:	99 7e       	andi	r25, 0xE9	; 233
 bcc:	a9 2e       	mov	r10, r25
 bce:	09 c0       	rjmp	.+18     	; 0xbe2 <__stack+0x2e3>
 bd0:	a2 fe       	sbrs	r10, 2
 bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <__stack+0x2e1>
 bd4:	b3 94       	inc	r11
 bd6:	b3 94       	inc	r11
 bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__stack+0x2e3>
 bda:	8a 2d       	mov	r24, r10
 bdc:	86 78       	andi	r24, 0x86	; 134
 bde:	09 f0       	breq	.+2      	; 0xbe2 <__stack+0x2e3>
 be0:	b3 94       	inc	r11
 be2:	a3 fc       	sbrc	r10, 3
 be4:	11 c0       	rjmp	.+34     	; 0xc08 <__stack+0x309>
 be6:	a0 fe       	sbrs	r10, 0
 be8:	06 c0       	rjmp	.+12     	; 0xbf6 <__stack+0x2f7>
 bea:	b2 14       	cp	r11, r2
 bec:	88 f4       	brcc	.+34     	; 0xc10 <__stack+0x311>
 bee:	28 0c       	add	r2, r8
 bf0:	92 2c       	mov	r9, r2
 bf2:	9b 18       	sub	r9, r11
 bf4:	0e c0       	rjmp	.+28     	; 0xc12 <__stack+0x313>
 bf6:	b2 14       	cp	r11, r2
 bf8:	60 f4       	brcc	.+24     	; 0xc12 <__stack+0x313>
 bfa:	b6 01       	movw	r22, r12
 bfc:	80 e2       	ldi	r24, 0x20	; 32
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c04:	b3 94       	inc	r11
 c06:	f7 cf       	rjmp	.-18     	; 0xbf6 <__stack+0x2f7>
 c08:	b2 14       	cp	r11, r2
 c0a:	18 f4       	brcc	.+6      	; 0xc12 <__stack+0x313>
 c0c:	2b 18       	sub	r2, r11
 c0e:	02 c0       	rjmp	.+4      	; 0xc14 <__stack+0x315>
 c10:	98 2c       	mov	r9, r8
 c12:	21 2c       	mov	r2, r1
 c14:	a4 fe       	sbrs	r10, 4
 c16:	10 c0       	rjmp	.+32     	; 0xc38 <__stack+0x339>
 c18:	b6 01       	movw	r22, r12
 c1a:	80 e3       	ldi	r24, 0x30	; 48
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c22:	a2 fe       	sbrs	r10, 2
 c24:	17 c0       	rjmp	.+46     	; 0xc54 <__stack+0x355>
 c26:	a1 fc       	sbrc	r10, 1
 c28:	03 c0       	rjmp	.+6      	; 0xc30 <__stack+0x331>
 c2a:	88 e7       	ldi	r24, 0x78	; 120
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	02 c0       	rjmp	.+4      	; 0xc34 <__stack+0x335>
 c30:	88 e5       	ldi	r24, 0x58	; 88
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	b6 01       	movw	r22, r12
 c36:	0c c0       	rjmp	.+24     	; 0xc50 <__stack+0x351>
 c38:	8a 2d       	mov	r24, r10
 c3a:	86 78       	andi	r24, 0x86	; 134
 c3c:	59 f0       	breq	.+22     	; 0xc54 <__stack+0x355>
 c3e:	a1 fe       	sbrs	r10, 1
 c40:	02 c0       	rjmp	.+4      	; 0xc46 <__stack+0x347>
 c42:	8b e2       	ldi	r24, 0x2B	; 43
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <__stack+0x349>
 c46:	80 e2       	ldi	r24, 0x20	; 32
 c48:	a7 fc       	sbrc	r10, 7
 c4a:	8d e2       	ldi	r24, 0x2D	; 45
 c4c:	b6 01       	movw	r22, r12
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c54:	89 14       	cp	r8, r9
 c56:	38 f4       	brcc	.+14     	; 0xc66 <__stack+0x367>
 c58:	b6 01       	movw	r22, r12
 c5a:	80 e3       	ldi	r24, 0x30	; 48
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c62:	9a 94       	dec	r9
 c64:	f7 cf       	rjmp	.-18     	; 0xc54 <__stack+0x355>
 c66:	8a 94       	dec	r8
 c68:	f3 01       	movw	r30, r6
 c6a:	e8 0d       	add	r30, r8
 c6c:	f1 1d       	adc	r31, r1
 c6e:	80 81       	ld	r24, Z
 c70:	b6 01       	movw	r22, r12
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c78:	81 10       	cpse	r8, r1
 c7a:	f5 cf       	rjmp	.-22     	; 0xc66 <__stack+0x367>
 c7c:	22 20       	and	r2, r2
 c7e:	09 f4       	brne	.+2      	; 0xc82 <__stack+0x383>
 c80:	42 ce       	rjmp	.-892    	; 0x906 <__stack+0x7>
 c82:	b6 01       	movw	r22, r12
 c84:	80 e2       	ldi	r24, 0x20	; 32
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c8c:	2a 94       	dec	r2
 c8e:	f6 cf       	rjmp	.-20     	; 0xc7c <__stack+0x37d>
 c90:	f6 01       	movw	r30, r12
 c92:	86 81       	ldd	r24, Z+6	; 0x06
 c94:	97 81       	ldd	r25, Z+7	; 0x07
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <__stack+0x39d>
 c98:	8f ef       	ldi	r24, 0xFF	; 255
 c9a:	9f ef       	ldi	r25, 0xFF	; 255
 c9c:	2b 96       	adiw	r28, 0x0b	; 11
 c9e:	e2 e1       	ldi	r30, 0x12	; 18
 ca0:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__epilogue_restores__>

00000ca4 <strnlen_P>:
 ca4:	fc 01       	movw	r30, r24
 ca6:	05 90       	lpm	r0, Z+
 ca8:	61 50       	subi	r22, 0x01	; 1
 caa:	70 40       	sbci	r23, 0x00	; 0
 cac:	01 10       	cpse	r0, r1
 cae:	d8 f7       	brcc	.-10     	; 0xca6 <strnlen_P+0x2>
 cb0:	80 95       	com	r24
 cb2:	90 95       	com	r25
 cb4:	8e 0f       	add	r24, r30
 cb6:	9f 1f       	adc	r25, r31
 cb8:	08 95       	ret

00000cba <strnlen>:
 cba:	fc 01       	movw	r30, r24
 cbc:	61 50       	subi	r22, 0x01	; 1
 cbe:	70 40       	sbci	r23, 0x00	; 0
 cc0:	01 90       	ld	r0, Z+
 cc2:	01 10       	cpse	r0, r1
 cc4:	d8 f7       	brcc	.-10     	; 0xcbc <strnlen+0x2>
 cc6:	80 95       	com	r24
 cc8:	90 95       	com	r25
 cca:	8e 0f       	add	r24, r30
 ccc:	9f 1f       	adc	r25, r31
 cce:	08 95       	ret

00000cd0 <fputc>:
 cd0:	0f 93       	push	r16
 cd2:	1f 93       	push	r17
 cd4:	cf 93       	push	r28
 cd6:	df 93       	push	r29
 cd8:	fb 01       	movw	r30, r22
 cda:	23 81       	ldd	r18, Z+3	; 0x03
 cdc:	21 fd       	sbrc	r18, 1
 cde:	03 c0       	rjmp	.+6      	; 0xce6 <fputc+0x16>
 ce0:	8f ef       	ldi	r24, 0xFF	; 255
 ce2:	9f ef       	ldi	r25, 0xFF	; 255
 ce4:	2c c0       	rjmp	.+88     	; 0xd3e <fputc+0x6e>
 ce6:	22 ff       	sbrs	r18, 2
 ce8:	16 c0       	rjmp	.+44     	; 0xd16 <fputc+0x46>
 cea:	46 81       	ldd	r20, Z+6	; 0x06
 cec:	57 81       	ldd	r21, Z+7	; 0x07
 cee:	24 81       	ldd	r18, Z+4	; 0x04
 cf0:	35 81       	ldd	r19, Z+5	; 0x05
 cf2:	42 17       	cp	r20, r18
 cf4:	53 07       	cpc	r21, r19
 cf6:	44 f4       	brge	.+16     	; 0xd08 <fputc+0x38>
 cf8:	a0 81       	ld	r26, Z
 cfa:	b1 81       	ldd	r27, Z+1	; 0x01
 cfc:	9d 01       	movw	r18, r26
 cfe:	2f 5f       	subi	r18, 0xFF	; 255
 d00:	3f 4f       	sbci	r19, 0xFF	; 255
 d02:	31 83       	std	Z+1, r19	; 0x01
 d04:	20 83       	st	Z, r18
 d06:	8c 93       	st	X, r24
 d08:	26 81       	ldd	r18, Z+6	; 0x06
 d0a:	37 81       	ldd	r19, Z+7	; 0x07
 d0c:	2f 5f       	subi	r18, 0xFF	; 255
 d0e:	3f 4f       	sbci	r19, 0xFF	; 255
 d10:	37 83       	std	Z+7, r19	; 0x07
 d12:	26 83       	std	Z+6, r18	; 0x06
 d14:	14 c0       	rjmp	.+40     	; 0xd3e <fputc+0x6e>
 d16:	8b 01       	movw	r16, r22
 d18:	ec 01       	movw	r28, r24
 d1a:	fb 01       	movw	r30, r22
 d1c:	00 84       	ldd	r0, Z+8	; 0x08
 d1e:	f1 85       	ldd	r31, Z+9	; 0x09
 d20:	e0 2d       	mov	r30, r0
 d22:	09 95       	icall
 d24:	89 2b       	or	r24, r25
 d26:	e1 f6       	brne	.-72     	; 0xce0 <fputc+0x10>
 d28:	d8 01       	movw	r26, r16
 d2a:	16 96       	adiw	r26, 0x06	; 6
 d2c:	8d 91       	ld	r24, X+
 d2e:	9c 91       	ld	r25, X
 d30:	17 97       	sbiw	r26, 0x07	; 7
 d32:	01 96       	adiw	r24, 0x01	; 1
 d34:	17 96       	adiw	r26, 0x07	; 7
 d36:	9c 93       	st	X, r25
 d38:	8e 93       	st	-X, r24
 d3a:	16 97       	sbiw	r26, 0x06	; 6
 d3c:	ce 01       	movw	r24, r28
 d3e:	df 91       	pop	r29
 d40:	cf 91       	pop	r28
 d42:	1f 91       	pop	r17
 d44:	0f 91       	pop	r16
 d46:	08 95       	ret

00000d48 <__ultoa_invert>:
 d48:	fa 01       	movw	r30, r20
 d4a:	aa 27       	eor	r26, r26
 d4c:	28 30       	cpi	r18, 0x08	; 8
 d4e:	51 f1       	breq	.+84     	; 0xda4 <__ultoa_invert+0x5c>
 d50:	20 31       	cpi	r18, 0x10	; 16
 d52:	81 f1       	breq	.+96     	; 0xdb4 <__ultoa_invert+0x6c>
 d54:	e8 94       	clt
 d56:	6f 93       	push	r22
 d58:	6e 7f       	andi	r22, 0xFE	; 254
 d5a:	6e 5f       	subi	r22, 0xFE	; 254
 d5c:	7f 4f       	sbci	r23, 0xFF	; 255
 d5e:	8f 4f       	sbci	r24, 0xFF	; 255
 d60:	9f 4f       	sbci	r25, 0xFF	; 255
 d62:	af 4f       	sbci	r26, 0xFF	; 255
 d64:	b1 e0       	ldi	r27, 0x01	; 1
 d66:	3e d0       	rcall	.+124    	; 0xde4 <__ultoa_invert+0x9c>
 d68:	b4 e0       	ldi	r27, 0x04	; 4
 d6a:	3c d0       	rcall	.+120    	; 0xde4 <__ultoa_invert+0x9c>
 d6c:	67 0f       	add	r22, r23
 d6e:	78 1f       	adc	r23, r24
 d70:	89 1f       	adc	r24, r25
 d72:	9a 1f       	adc	r25, r26
 d74:	a1 1d       	adc	r26, r1
 d76:	68 0f       	add	r22, r24
 d78:	79 1f       	adc	r23, r25
 d7a:	8a 1f       	adc	r24, r26
 d7c:	91 1d       	adc	r25, r1
 d7e:	a1 1d       	adc	r26, r1
 d80:	6a 0f       	add	r22, r26
 d82:	71 1d       	adc	r23, r1
 d84:	81 1d       	adc	r24, r1
 d86:	91 1d       	adc	r25, r1
 d88:	a1 1d       	adc	r26, r1
 d8a:	20 d0       	rcall	.+64     	; 0xdcc <__ultoa_invert+0x84>
 d8c:	09 f4       	brne	.+2      	; 0xd90 <__ultoa_invert+0x48>
 d8e:	68 94       	set
 d90:	3f 91       	pop	r19
 d92:	2a e0       	ldi	r18, 0x0A	; 10
 d94:	26 9f       	mul	r18, r22
 d96:	11 24       	eor	r1, r1
 d98:	30 19       	sub	r19, r0
 d9a:	30 5d       	subi	r19, 0xD0	; 208
 d9c:	31 93       	st	Z+, r19
 d9e:	de f6       	brtc	.-74     	; 0xd56 <__ultoa_invert+0xe>
 da0:	cf 01       	movw	r24, r30
 da2:	08 95       	ret
 da4:	46 2f       	mov	r20, r22
 da6:	47 70       	andi	r20, 0x07	; 7
 da8:	40 5d       	subi	r20, 0xD0	; 208
 daa:	41 93       	st	Z+, r20
 dac:	b3 e0       	ldi	r27, 0x03	; 3
 dae:	0f d0       	rcall	.+30     	; 0xdce <__ultoa_invert+0x86>
 db0:	c9 f7       	brne	.-14     	; 0xda4 <__ultoa_invert+0x5c>
 db2:	f6 cf       	rjmp	.-20     	; 0xda0 <__ultoa_invert+0x58>
 db4:	46 2f       	mov	r20, r22
 db6:	4f 70       	andi	r20, 0x0F	; 15
 db8:	40 5d       	subi	r20, 0xD0	; 208
 dba:	4a 33       	cpi	r20, 0x3A	; 58
 dbc:	18 f0       	brcs	.+6      	; 0xdc4 <__ultoa_invert+0x7c>
 dbe:	49 5d       	subi	r20, 0xD9	; 217
 dc0:	31 fd       	sbrc	r19, 1
 dc2:	40 52       	subi	r20, 0x20	; 32
 dc4:	41 93       	st	Z+, r20
 dc6:	02 d0       	rcall	.+4      	; 0xdcc <__ultoa_invert+0x84>
 dc8:	a9 f7       	brne	.-22     	; 0xdb4 <__ultoa_invert+0x6c>
 dca:	ea cf       	rjmp	.-44     	; 0xda0 <__ultoa_invert+0x58>
 dcc:	b4 e0       	ldi	r27, 0x04	; 4
 dce:	a6 95       	lsr	r26
 dd0:	97 95       	ror	r25
 dd2:	87 95       	ror	r24
 dd4:	77 95       	ror	r23
 dd6:	67 95       	ror	r22
 dd8:	ba 95       	dec	r27
 dda:	c9 f7       	brne	.-14     	; 0xdce <__ultoa_invert+0x86>
 ddc:	00 97       	sbiw	r24, 0x00	; 0
 dde:	61 05       	cpc	r22, r1
 de0:	71 05       	cpc	r23, r1
 de2:	08 95       	ret
 de4:	9b 01       	movw	r18, r22
 de6:	ac 01       	movw	r20, r24
 de8:	0a 2e       	mov	r0, r26
 dea:	06 94       	lsr	r0
 dec:	57 95       	ror	r21
 dee:	47 95       	ror	r20
 df0:	37 95       	ror	r19
 df2:	27 95       	ror	r18
 df4:	ba 95       	dec	r27
 df6:	c9 f7       	brne	.-14     	; 0xdea <__ultoa_invert+0xa2>
 df8:	62 0f       	add	r22, r18
 dfa:	73 1f       	adc	r23, r19
 dfc:	84 1f       	adc	r24, r20
 dfe:	95 1f       	adc	r25, r21
 e00:	a0 1d       	adc	r26, r0
 e02:	08 95       	ret

00000e04 <__divmodsi4>:
 e04:	05 2e       	mov	r0, r21
 e06:	97 fb       	bst	r25, 7
 e08:	1e f4       	brtc	.+6      	; 0xe10 <__divmodsi4+0xc>
 e0a:	00 94       	com	r0
 e0c:	0e 94 19 07 	call	0xe32	; 0xe32 <__negsi2>
 e10:	57 fd       	sbrc	r21, 7
 e12:	07 d0       	rcall	.+14     	; 0xe22 <__divmodsi4_neg2>
 e14:	0e 94 6b 07 	call	0xed6	; 0xed6 <__udivmodsi4>
 e18:	07 fc       	sbrc	r0, 7
 e1a:	03 d0       	rcall	.+6      	; 0xe22 <__divmodsi4_neg2>
 e1c:	4e f4       	brtc	.+18     	; 0xe30 <__divmodsi4_exit>
 e1e:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__negsi2>

00000e22 <__divmodsi4_neg2>:
 e22:	50 95       	com	r21
 e24:	40 95       	com	r20
 e26:	30 95       	com	r19
 e28:	21 95       	neg	r18
 e2a:	3f 4f       	sbci	r19, 0xFF	; 255
 e2c:	4f 4f       	sbci	r20, 0xFF	; 255
 e2e:	5f 4f       	sbci	r21, 0xFF	; 255

00000e30 <__divmodsi4_exit>:
 e30:	08 95       	ret

00000e32 <__negsi2>:
 e32:	90 95       	com	r25
 e34:	80 95       	com	r24
 e36:	70 95       	com	r23
 e38:	61 95       	neg	r22
 e3a:	7f 4f       	sbci	r23, 0xFF	; 255
 e3c:	8f 4f       	sbci	r24, 0xFF	; 255
 e3e:	9f 4f       	sbci	r25, 0xFF	; 255
 e40:	08 95       	ret

00000e42 <__muluhisi3>:
 e42:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__umulhisi3>
 e46:	a5 9f       	mul	r26, r21
 e48:	90 0d       	add	r25, r0
 e4a:	b4 9f       	mul	r27, r20
 e4c:	90 0d       	add	r25, r0
 e4e:	a4 9f       	mul	r26, r20
 e50:	80 0d       	add	r24, r0
 e52:	91 1d       	adc	r25, r1
 e54:	11 24       	eor	r1, r1
 e56:	08 95       	ret

00000e58 <__mulshisi3>:
 e58:	b7 ff       	sbrs	r27, 7
 e5a:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__muluhisi3>

00000e5e <__mulohisi3>:
 e5e:	0e 94 21 07 	call	0xe42	; 0xe42 <__muluhisi3>
 e62:	82 1b       	sub	r24, r18
 e64:	93 0b       	sbc	r25, r19
 e66:	08 95       	ret

00000e68 <__prologue_saves__>:
 e68:	2f 92       	push	r2
 e6a:	3f 92       	push	r3
 e6c:	4f 92       	push	r4
 e6e:	5f 92       	push	r5
 e70:	6f 92       	push	r6
 e72:	7f 92       	push	r7
 e74:	8f 92       	push	r8
 e76:	9f 92       	push	r9
 e78:	af 92       	push	r10
 e7a:	bf 92       	push	r11
 e7c:	cf 92       	push	r12
 e7e:	df 92       	push	r13
 e80:	ef 92       	push	r14
 e82:	ff 92       	push	r15
 e84:	0f 93       	push	r16
 e86:	1f 93       	push	r17
 e88:	cf 93       	push	r28
 e8a:	df 93       	push	r29
 e8c:	cd b7       	in	r28, 0x3d	; 61
 e8e:	de b7       	in	r29, 0x3e	; 62
 e90:	ca 1b       	sub	r28, r26
 e92:	db 0b       	sbc	r29, r27
 e94:	0f b6       	in	r0, 0x3f	; 63
 e96:	f8 94       	cli
 e98:	de bf       	out	0x3e, r29	; 62
 e9a:	0f be       	out	0x3f, r0	; 63
 e9c:	cd bf       	out	0x3d, r28	; 61
 e9e:	09 94       	ijmp

00000ea0 <__epilogue_restores__>:
 ea0:	2a 88       	ldd	r2, Y+18	; 0x12
 ea2:	39 88       	ldd	r3, Y+17	; 0x11
 ea4:	48 88       	ldd	r4, Y+16	; 0x10
 ea6:	5f 84       	ldd	r5, Y+15	; 0x0f
 ea8:	6e 84       	ldd	r6, Y+14	; 0x0e
 eaa:	7d 84       	ldd	r7, Y+13	; 0x0d
 eac:	8c 84       	ldd	r8, Y+12	; 0x0c
 eae:	9b 84       	ldd	r9, Y+11	; 0x0b
 eb0:	aa 84       	ldd	r10, Y+10	; 0x0a
 eb2:	b9 84       	ldd	r11, Y+9	; 0x09
 eb4:	c8 84       	ldd	r12, Y+8	; 0x08
 eb6:	df 80       	ldd	r13, Y+7	; 0x07
 eb8:	ee 80       	ldd	r14, Y+6	; 0x06
 eba:	fd 80       	ldd	r15, Y+5	; 0x05
 ebc:	0c 81       	ldd	r16, Y+4	; 0x04
 ebe:	1b 81       	ldd	r17, Y+3	; 0x03
 ec0:	aa 81       	ldd	r26, Y+2	; 0x02
 ec2:	b9 81       	ldd	r27, Y+1	; 0x01
 ec4:	ce 0f       	add	r28, r30
 ec6:	d1 1d       	adc	r29, r1
 ec8:	0f b6       	in	r0, 0x3f	; 63
 eca:	f8 94       	cli
 ecc:	de bf       	out	0x3e, r29	; 62
 ece:	0f be       	out	0x3f, r0	; 63
 ed0:	cd bf       	out	0x3d, r28	; 61
 ed2:	ed 01       	movw	r28, r26
 ed4:	08 95       	ret

00000ed6 <__udivmodsi4>:
 ed6:	a1 e2       	ldi	r26, 0x21	; 33
 ed8:	1a 2e       	mov	r1, r26
 eda:	aa 1b       	sub	r26, r26
 edc:	bb 1b       	sub	r27, r27
 ede:	fd 01       	movw	r30, r26
 ee0:	0d c0       	rjmp	.+26     	; 0xefc <__udivmodsi4_ep>

00000ee2 <__udivmodsi4_loop>:
 ee2:	aa 1f       	adc	r26, r26
 ee4:	bb 1f       	adc	r27, r27
 ee6:	ee 1f       	adc	r30, r30
 ee8:	ff 1f       	adc	r31, r31
 eea:	a2 17       	cp	r26, r18
 eec:	b3 07       	cpc	r27, r19
 eee:	e4 07       	cpc	r30, r20
 ef0:	f5 07       	cpc	r31, r21
 ef2:	20 f0       	brcs	.+8      	; 0xefc <__udivmodsi4_ep>
 ef4:	a2 1b       	sub	r26, r18
 ef6:	b3 0b       	sbc	r27, r19
 ef8:	e4 0b       	sbc	r30, r20
 efa:	f5 0b       	sbc	r31, r21

00000efc <__udivmodsi4_ep>:
 efc:	66 1f       	adc	r22, r22
 efe:	77 1f       	adc	r23, r23
 f00:	88 1f       	adc	r24, r24
 f02:	99 1f       	adc	r25, r25
 f04:	1a 94       	dec	r1
 f06:	69 f7       	brne	.-38     	; 0xee2 <__udivmodsi4_loop>
 f08:	60 95       	com	r22
 f0a:	70 95       	com	r23
 f0c:	80 95       	com	r24
 f0e:	90 95       	com	r25
 f10:	9b 01       	movw	r18, r22
 f12:	ac 01       	movw	r20, r24
 f14:	bd 01       	movw	r22, r26
 f16:	cf 01       	movw	r24, r30
 f18:	08 95       	ret

00000f1a <__umulhisi3>:
 f1a:	a2 9f       	mul	r26, r18
 f1c:	b0 01       	movw	r22, r0
 f1e:	b3 9f       	mul	r27, r19
 f20:	c0 01       	movw	r24, r0
 f22:	a3 9f       	mul	r26, r19
 f24:	70 0d       	add	r23, r0
 f26:	81 1d       	adc	r24, r1
 f28:	11 24       	eor	r1, r1
 f2a:	91 1d       	adc	r25, r1
 f2c:	b2 9f       	mul	r27, r18
 f2e:	70 0d       	add	r23, r0
 f30:	81 1d       	adc	r24, r1
 f32:	11 24       	eor	r1, r1
 f34:	91 1d       	adc	r25, r1
 f36:	08 95       	ret

00000f38 <_exit>:
 f38:	f8 94       	cli

00000f3a <__stop_program>:
 f3a:	ff cf       	rjmp	.-2      	; 0xf3a <__stop_program>
