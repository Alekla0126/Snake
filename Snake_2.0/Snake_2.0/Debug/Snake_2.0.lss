
Snake_2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000e92  00000f26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007c  00800152  00800152  00000f78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a7  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098b  00000000  00000000  00002393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f7  00000000  00000000  00002d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00003618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058a  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a35  00000000  00000000  00003e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00004877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3c       	cpi	r26, 0xCE	; 206
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <main>
  9e:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <handle_keypress>:
	DDRD = 0x00;
}
bool button_pressed(uint8_t button)
{
	return PIND & button;
}
  a6:	fc 01       	movw	r30, r24
  a8:	20 81       	ld	r18, Z
  aa:	91 81       	ldd	r25, Z+1	; 0x01
  ac:	29 17       	cp	r18, r25
  ae:	01 f1       	breq	.+64     	; 0xf0 <handle_keypress+0x4a>
  b0:	22 23       	and	r18, r18
  b2:	11 f0       	breq	.+4      	; 0xb8 <handle_keypress+0x12>
  b4:	91 11       	cpse	r25, r1
  b6:	1c c0       	rjmp	.+56     	; 0xf0 <handle_keypress+0x4a>
  b8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <direction>
  bc:	02 2e       	mov	r0, r18
  be:	00 0c       	add	r0, r0
  c0:	33 0b       	sbc	r19, r19
  c2:	28 0f       	add	r18, r24
  c4:	31 1d       	adc	r19, r1
  c6:	87 fd       	sbrc	r24, 7
  c8:	3a 95       	dec	r19
  ca:	23 2b       	or	r18, r19
  cc:	89 f0       	breq	.+34     	; 0xf0 <handle_keypress+0x4a>
  ce:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <direction+0x1>
  d2:	29 2f       	mov	r18, r25
  d4:	99 0f       	add	r25, r25
  d6:	33 0b       	sbc	r19, r19
  d8:	28 0f       	add	r18, r24
  da:	31 1d       	adc	r19, r1
  dc:	87 fd       	sbrc	r24, 7
  de:	3a 95       	dec	r19
  e0:	23 2b       	or	r18, r19
  e2:	31 f0       	breq	.+12     	; 0xf0 <handle_keypress+0x4a>
  e4:	80 81       	ld	r24, Z
  e6:	91 81       	ldd	r25, Z+1	; 0x01
  e8:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <direction+0x1>
  ec:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <direction>
  f0:	08 95       	ret

000000f2 <set_cell>:
  f2:	dc 01       	movw	r26, r24
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	2c 91       	ld	r18, X
  f8:	11 97       	sbiw	r26, 0x01	; 1
  fa:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <world+0x24>
  fe:	23 03       	mulsu	r18, r19
 100:	f0 01       	movw	r30, r0
 102:	11 24       	eor	r1, r1
 104:	8c 91       	ld	r24, X
 106:	e0 56       	subi	r30, 0x60	; 96
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	e8 0f       	add	r30, r24
 10c:	f1 1d       	adc	r31, r1
 10e:	87 fd       	sbrc	r24, 7
 110:	fa 95       	dec	r31
 112:	60 83       	st	Z, r22
 114:	08 95       	ret

00000116 <direction_to_position>:
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	71 f0       	breq	.+28     	; 0x136 <direction_to_position+0x20>
 11a:	18 f4       	brcc	.+6      	; 0x122 <direction_to_position+0xc>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	41 f0       	breq	.+16     	; 0x130 <direction_to_position+0x1a>
 120:	0d c0       	rjmp	.+26     	; 0x13c <direction_to_position+0x26>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	d1 f0       	breq	.+52     	; 0x15a <direction_to_position+0x44>
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	49 f4       	brne	.+18     	; 0x13c <direction_to_position+0x26>
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	08 95       	ret
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret
 13c:	1f 92       	push	r1
 13e:	8f 93       	push	r24
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9f 93       	push	r25
 146:	8f 93       	push	r24
 148:	0e 94 06 04 	call	0x80c	; 0x80c <printf>
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret
 15a:	9f ef       	ldi	r25, 0xFF	; 255
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret

00000160 <position_to_direction>:
 160:	fc 01       	movw	r30, r24
 162:	90 81       	ld	r25, Z
 164:	9f 3f       	cpi	r25, 0xFF	; 255
 166:	39 f0       	breq	.+14     	; 0x176 <position_to_direction+0x16>
 168:	91 30       	cpi	r25, 0x01	; 1
 16a:	39 f0       	breq	.+14     	; 0x17a <position_to_direction+0x1a>
 16c:	81 81       	ldd	r24, Z+1	; 0x01
 16e:	8f 3f       	cpi	r24, 0xFF	; 255
 170:	31 f0       	breq	.+12     	; 0x17e <position_to_direction+0x1e>
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	08 95       	ret
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	08 95       	ret
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	08 95       	ret
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	08 95       	ret

00000182 <cell_at>:
 182:	dc 01       	movw	r26, r24
 184:	11 96       	adiw	r26, 0x01	; 1
 186:	2c 91       	ld	r18, X
 188:	11 97       	sbiw	r26, 0x01	; 1
 18a:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <world+0x24>
 18e:	23 03       	mulsu	r18, r19
 190:	f0 01       	movw	r30, r0
 192:	11 24       	eor	r1, r1
 194:	8c 91       	ld	r24, X
 196:	e0 56       	subi	r30, 0x60	; 96
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	e8 0f       	add	r30, r24
 19c:	f1 1d       	adc	r31, r1
 19e:	87 fd       	sbrc	r24, 7
 1a0:	fa 95       	dec	r31
 1a2:	80 81       	ld	r24, Z
 1a4:	08 95       	ret

000001a6 <place_food>:
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	c2 e5       	ldi	r28, 0x52	; 82
 1b0:	d1 e0       	ldi	r29, 0x01	; 1
 1b2:	00 ea       	ldi	r16, 0xA0	; 160
 1b4:	11 e0       	ldi	r17, 0x01	; 1
 1b6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <rand>
 1ba:	f8 01       	movw	r30, r16
 1bc:	64 a1       	ldd	r22, Z+36	; 0x24
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	0e 94 82 03 	call	0x704	; 0x704 <__divmodhi4>
 1c4:	88 83       	st	Y, r24
 1c6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <rand>
 1ca:	f8 01       	movw	r30, r16
 1cc:	63 a1       	ldd	r22, Z+35	; 0x23
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0e 94 82 03 	call	0x704	; 0x704 <__divmodhi4>
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	ce 01       	movw	r24, r28
 1d8:	0e 94 c1 00 	call	0x182	; 0x182 <cell_at>
 1dc:	81 11       	cpse	r24, r1
 1de:	eb cf       	rjmp	.-42     	; 0x1b6 <place_food+0x10>
 1e0:	65 e0       	ldi	r22, 0x05	; 5
 1e2:	82 e5       	ldi	r24, 0x52	; 82
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 79 00 	call	0xf2	; 0xf2 <set_cell>
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <handle_wrapping>:
 1f4:	fc 01       	movw	r30, r24
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	2c f4       	brge	.+10     	; 0x206 <handle_wrapping+0x12>
 1fc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <world+0x24>
 200:	81 50       	subi	r24, 0x01	; 1
 202:	80 83       	st	Z, r24
 204:	0a c0       	rjmp	.+20     	; 0x21a <handle_wrapping+0x26>
 206:	08 2e       	mov	r0, r24
 208:	00 0c       	add	r0, r0
 20a:	99 0b       	sbc	r25, r25
 20c:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <world+0x24>
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	82 17       	cp	r24, r18
 214:	93 07       	cpc	r25, r19
 216:	0c f0       	brlt	.+2      	; 0x21a <handle_wrapping+0x26>
 218:	10 82       	st	Z, r1
 21a:	21 81       	ldd	r18, Z+1	; 0x01
 21c:	22 23       	and	r18, r18
 21e:	2c f4       	brge	.+10     	; 0x22a <handle_wrapping+0x36>
 220:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <world+0x23>
 224:	81 50       	subi	r24, 0x01	; 1
 226:	81 83       	std	Z+1, r24	; 0x01
 228:	08 95       	ret
 22a:	02 2e       	mov	r0, r18
 22c:	00 0c       	add	r0, r0
 22e:	33 0b       	sbc	r19, r19
 230:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <world+0x23>
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	28 17       	cp	r18, r24
 238:	39 07       	cpc	r19, r25
 23a:	0c f0       	brlt	.+2      	; 0x23e <handle_wrapping+0x4a>
 23c:	11 82       	std	Z+1, r1	; 0x01
 23e:	08 95       	ret

00000240 <move_head>:
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	00 d0       	rcall	.+0      	; 0x24a <move_head+0xa>
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	8c 01       	movw	r16, r24
 250:	fc 01       	movw	r30, r24
 252:	90 81       	ld	r25, Z
 254:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <snake+0x48>
 258:	98 13       	cpse	r25, r24
 25a:	21 c0       	rjmp	.+66     	; 0x29e <move_head+0x5e>
 25c:	91 81       	ldd	r25, Z+1	; 0x01
 25e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <snake+0x49>
 262:	98 13       	cpse	r25, r24
 264:	1c c0       	rjmp	.+56     	; 0x29e <move_head+0x5e>
 266:	8c e9       	ldi	r24, 0x9C	; 156
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 c1 00 	call	0x182	; 0x182 <cell_at>
 26e:	0e 94 8b 00 	call	0x116	; 0x116 <direction_to_position>
 272:	0c e9       	ldi	r16, 0x9C	; 156
 274:	11 e0       	ldi	r17, 0x01	; 1
 276:	f8 01       	movw	r30, r16
 278:	20 81       	ld	r18, Z
 27a:	82 0f       	add	r24, r18
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <snake+0x49>
 282:	98 0f       	add	r25, r24
 284:	9a 83       	std	Y+2, r25	; 0x02
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <handle_wrapping>
 28e:	f8 01       	movw	r30, r16
 290:	80 81       	ld	r24, Z
 292:	91 81       	ldd	r25, Z+1	; 0x01
 294:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <snake+0x47>
 298:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <snake+0x46>
 29c:	10 c0       	rjmp	.+32     	; 0x2be <move_head+0x7e>
 29e:	86 ec       	ldi	r24, 0xC6	; 198
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 b0 00 	call	0x160	; 0x160 <position_to_direction>
 2a6:	f8 01       	movw	r30, r16
 2a8:	20 81       	ld	r18, Z
 2aa:	31 81       	ldd	r19, Z+1	; 0x01
 2ac:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <snake+0x47>
 2b0:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <snake+0x46>
 2b4:	68 2f       	mov	r22, r24
 2b6:	8a e9       	ldi	r24, 0x9A	; 154
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 79 00 	call	0xf2	; 0xf2 <set_cell>
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <move_tail>:
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <move_tail+0x8>
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <snake+0x48>
 2dc:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <snake+0x49>
 2e0:	9a 83       	std	Y+2, r25	; 0x02
 2e2:	89 83       	std	Y+1, r24	; 0x01
 2e4:	8c e9       	ldi	r24, 0x9C	; 156
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 c1 00 	call	0x182	; 0x182 <cell_at>
 2ec:	18 2f       	mov	r17, r24
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	a9 f0       	breq	.+42     	; 0x31c <move_tail+0x50>
 2f2:	18 f4       	brcc	.+6      	; 0x2fa <move_tail+0x2e>
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	71 f0       	breq	.+28     	; 0x314 <move_tail+0x48>
 2f8:	15 c0       	rjmp	.+42     	; 0x324 <move_tail+0x58>
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	19 f0       	breq	.+6      	; 0x304 <move_tail+0x38>
 2fe:	84 30       	cpi	r24, 0x04	; 4
 300:	29 f0       	breq	.+10     	; 0x30c <move_tail+0x40>
 302:	10 c0       	rjmp	.+32     	; 0x324 <move_tail+0x58>
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	81 50       	subi	r24, 0x01	; 1
 308:	8a 83       	std	Y+2, r24	; 0x02
 30a:	18 c0       	rjmp	.+48     	; 0x33c <move_tail+0x70>
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	8a 83       	std	Y+2, r24	; 0x02
 312:	14 c0       	rjmp	.+40     	; 0x33c <move_tail+0x70>
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	81 50       	subi	r24, 0x01	; 1
 318:	89 83       	std	Y+1, r24	; 0x01
 31a:	10 c0       	rjmp	.+32     	; 0x33c <move_tail+0x70>
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	0c c0       	rjmp	.+24     	; 0x33c <move_tail+0x70>
 324:	1f 92       	push	r1
 326:	1f 93       	push	r17
 328:	84 e0       	ldi	r24, 0x04	; 4
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	9f 93       	push	r25
 32e:	8f 93       	push	r24
 330:	0e 94 06 04 	call	0x80c	; 0x80c <printf>
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	ce 01       	movw	r24, r28
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <handle_wrapping>
 344:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <snake+0x46>
 348:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <snake+0x48>
 34c:	98 13       	cpse	r25, r24
 34e:	0c c0       	rjmp	.+24     	; 0x368 <move_tail+0x9c>
 350:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <snake+0x47>
 354:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <snake+0x49>
 358:	98 13       	cpse	r25, r24
 35a:	06 c0       	rjmp	.+12     	; 0x368 <move_tail+0x9c>
 35c:	61 2f       	mov	r22, r17
 35e:	8c e9       	ldi	r24, 0x9C	; 156
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 79 00 	call	0xf2	; 0xf2 <set_cell>
 366:	0b c0       	rjmp	.+22     	; 0x37e <move_tail+0xb2>
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	8c e9       	ldi	r24, 0x9C	; 156
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	0e 94 79 00 	call	0xf2	; 0xf2 <set_cell>
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <snake+0x49>
 37a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <snake+0x48>
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	08 95       	ret

0000038a <eat_food>:
 38a:	cf 93       	push	r28
 38c:	c6 2f       	mov	r28, r22
 38e:	0e 94 20 01 	call	0x240	; 0x240 <move_head>
 392:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <snake+0x4a>
 396:	c5 30       	cpi	r28, 0x05	; 5
 398:	11 f0       	breq	.+4      	; 0x39e <eat_food+0x14>
 39a:	95 e0       	ldi	r25, 0x05	; 5
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <eat_food+0x16>
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	89 0f       	add	r24, r25
 3a2:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <snake+0x4a>
 3a6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <place_food>
 3aa:	ef e9       	ldi	r30, 0x9F	; 159
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	80 81       	ld	r24, Z
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
 3b2:	80 83       	st	Z, r24
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <tick>:
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	00 d0       	rcall	.+0      	; 0x3be <tick+0x6>
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	86 ec       	ldi	r24, 0xC6	; 198
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 b0 00 	call	0x160	; 0x160 <position_to_direction>
 3ca:	68 2f       	mov	r22, r24
 3cc:	8a e9       	ldi	r24, 0x9A	; 154
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 79 00 	call	0xf2	; 0xf2 <set_cell>
 3d4:	e6 ec       	ldi	r30, 0xC6	; 198
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	90 81       	ld	r25, Z
 3da:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <snake+0x46>
 3de:	89 0f       	add	r24, r25
 3e0:	89 83       	std	Y+1, r24	; 0x01
 3e2:	91 81       	ldd	r25, Z+1	; 0x01
 3e4:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <snake+0x47>
 3e8:	89 0f       	add	r24, r25
 3ea:	8a 83       	std	Y+2, r24	; 0x02
 3ec:	ce 01       	movw	r24, r28
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <handle_wrapping>
 3f4:	ce 01       	movw	r24, r28
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	0e 94 c1 00 	call	0x182	; 0x182 <cell_at>
 3fc:	88 23       	and	r24, r24
 3fe:	51 f0       	breq	.+20     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 400:	9b ef       	ldi	r25, 0xFB	; 251
 402:	98 0f       	add	r25, r24
 404:	92 30       	cpi	r25, 0x02	; 2
 406:	68 f4       	brcc	.+26     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 408:	68 2f       	mov	r22, r24
 40a:	ce 01       	movw	r24, r28
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	0e 94 c5 01 	call	0x38a	; 0x38a <eat_food>
 412:	23 c0       	rjmp	.+70     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 414:	ce 01       	movw	r24, r28
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	0e 94 20 01 	call	0x240	; 0x240 <move_head>
 41c:	0e 94 66 01 	call	0x2cc	; 0x2cc <move_tail>
 420:	1c c0       	rjmp	.+56     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 422:	99 81       	ldd	r25, Y+1	; 0x01
 424:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <snake+0x48>
 428:	98 13       	cpse	r25, r24
 42a:	14 c0       	rjmp	.+40     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 42c:	9a 81       	ldd	r25, Y+2	; 0x02
 42e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <snake+0x49>
 432:	98 13       	cpse	r25, r24
 434:	0f c0       	rjmp	.+30     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 436:	83 e3       	ldi	r24, 0x33	; 51
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	9f 93       	push	r25
 43c:	8f 93       	push	r24
 43e:	0e 94 06 04 	call	0x80c	; 0x80c <printf>
 442:	ce 01       	movw	r24, r28
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	0e 94 20 01 	call	0x240	; 0x240 <move_head>
 44a:	0e 94 66 01 	call	0x2cc	; 0x2cc <move_tail>
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	03 c0       	rjmp	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <world+0x25>
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <init_game>:
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <init_game+0xa>
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	83 e2       	ldi	r24, 0x23	; 35
 474:	9a e4       	ldi	r25, 0x4A	; 74
 476:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <srand>
 47a:	e6 ec       	ldi	r30, 0xC6	; 198
 47c:	f1 e0       	ldi	r31, 0x01	; 1
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 83       	st	Z, r24
 482:	11 82       	std	Z+1, r1	; 0x01
 484:	e0 ea       	ldi	r30, 0xA0	; 160
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	85 e0       	ldi	r24, 0x05	; 5
 48a:	83 a3       	std	Z+35, r24	; 0x23
 48c:	87 e0       	ldi	r24, 0x07	; 7
 48e:	84 a3       	std	Z+36, r24	; 0x24
 490:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <snake+0x4a>
 494:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <snake+0x4b>
 498:	83 ec       	ldi	r24, 0xC3	; 195
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	11 92       	st	Z+, r1
 49e:	e8 17       	cp	r30, r24
 4a0:	f9 07       	cpc	r31, r25
 4a2:	e1 f7       	brne	.-8      	; 0x49c <init_game+0x38>
 4a4:	83 e0       	ldi	r24, 0x03	; 3
 4a6:	89 83       	std	Y+1, r24	; 0x01
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	8a 83       	std	Y+2, r24	; 0x02
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	ce 01       	movw	r24, r28
 4b0:	01 96       	adiw	r24, 0x01	; 1
 4b2:	0e 94 79 00 	call	0xf2	; 0xf2 <set_cell>
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ba:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <snake+0x47>
 4be:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <snake+0x46>
 4c2:	00 ea       	ldi	r16, 0xA0	; 160
 4c4:	11 e0       	ldi	r17, 0x01	; 1
 4c6:	f8 01       	movw	r30, r16
 4c8:	93 a1       	ldd	r25, Z+35	; 0x23
 4ca:	96 95       	lsr	r25
 4cc:	84 a1       	ldd	r24, Z+36	; 0x24
 4ce:	86 95       	lsr	r24
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	89 83       	std	Y+1, r24	; 0x01
 4d4:	9a 83       	std	Y+2, r25	; 0x02
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	ce 01       	movw	r24, r28
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	0e 94 79 00 	call	0xf2	; 0xf2 <set_cell>
 4e0:	f8 01       	movw	r30, r16
 4e2:	93 a1       	ldd	r25, Z+35	; 0x23
 4e4:	96 95       	lsr	r25
 4e6:	84 a1       	ldd	r24, Z+36	; 0x24
 4e8:	86 95       	lsr	r24
 4ea:	8e 5f       	subi	r24, 0xFE	; 254
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	9a 83       	std	Y+2, r25	; 0x02
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	0e 94 79 00 	call	0xf2	; 0xf2 <set_cell>
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	9a 81       	ldd	r25, Y+2	; 0x02
 4fe:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <snake+0x49>
 502:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <snake+0x48>
 506:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <place_food>
 50a:	86 ec       	ldi	r24, 0xC6	; 198
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 53 00 	call	0xa6	; 0xa6 <handle_keypress>
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	08 95       	ret

00000520 <init_matrix>:
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	87 b9       	out	0x07, r24	; 7
 524:	8f e7       	ldi	r24, 0x7F	; 127
 526:	84 b9       	out	0x04, r24	; 4
 528:	08 95       	ret

0000052a <any_pressed>:
bool any_pressed(void)
{
	return PIND & (UP | DOWN | LEFT | RIGHT);
 52a:	99 b1       	in	r25, 0x09	; 9
 52c:	9f 70       	andi	r25, 0x0F	; 15
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	09 f4       	brne	.+2      	; 0x534 <any_pressed+0xa>
 532:	80 e0       	ldi	r24, 0x00	; 0
}
 534:	08 95       	ret

00000536 <render>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////-------------->RENDER GAME///////////////////////////////////////////////////
void render(int repetitions)
{
 536:	7f 92       	push	r7
 538:	8f 92       	push	r8
 53a:	9f 92       	push	r9
 53c:	af 92       	push	r10
 53e:	bf 92       	push	r11
 540:	cf 92       	push	r12
 542:	df 92       	push	r13
 544:	ef 92       	push	r14
 546:	ff 92       	push	r15
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	00 d0       	rcall	.+0      	; 0x552 <render+0x1c>
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	4c 01       	movw	r8, r24
	const struct World *world = get_world();
	while(repetitions--) //it only displays correctly when multiplexing repeatedly
	{
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
 558:	0f 2e       	mov	r0, r31
 55a:	f0 ea       	ldi	r31, 0xA0	; 160
 55c:	af 2e       	mov	r10, r31
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	bf 2e       	mov	r11, r31
 562:	f0 2d       	mov	r31, r0
			for(row = 0; row < world->height; row++)
			{
				struct Position cell = {.x = col, .y = row};
				if(cell_at(&cell) != EMPTY)
				{
					data |= (1 << row);	
 564:	cc 24       	eor	r12, r12
 566:	c3 94       	inc	r12
 568:	d1 2c       	mov	r13, r1
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////-------------->RENDER GAME///////////////////////////////////////////////////
void render(int repetitions)
{
	const struct World *world = get_world();
	while(repetitions--) //it only displays correctly when multiplexing repeatedly
 56a:	2e c0       	rjmp	.+92     	; 0x5c8 <render+0x92>
	{
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
		{
			uint8_t data = 0;
			for(row = 0; row < world->height; row++)
 56c:	00 e0       	ldi	r16, 0x00	; 0
 56e:	10 e0       	ldi	r17, 0x00	; 0
 570:	71 2c       	mov	r7, r1
			{
				struct Position cell = {.x = col, .y = row};
 572:	f9 82       	std	Y+1, r15	; 0x01
 574:	0a 83       	std	Y+2, r16	; 0x02
				if(cell_at(&cell) != EMPTY)
 576:	ce 01       	movw	r24, r28
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	0e 94 c1 00 	call	0x182	; 0x182 <cell_at>
 57e:	88 23       	and	r24, r24
 580:	41 f0       	breq	.+16     	; 0x592 <render+0x5c>
				{
					data |= (1 << row);	
 582:	c6 01       	movw	r24, r12
 584:	00 2e       	mov	r0, r16
 586:	02 c0       	rjmp	.+4      	; 0x58c <render+0x56>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <render+0x52>
 590:	78 2a       	or	r7, r24
 592:	0f 5f       	subi	r16, 0xFF	; 255
 594:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
		{
			uint8_t data = 0;
			for(row = 0; row < world->height; row++)
 596:	0e 15       	cp	r16, r14
 598:	60 f3       	brcs	.-40     	; 0x572 <render+0x3c>
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 59a:	c6 01       	movw	r24, r12
 59c:	0f 2c       	mov	r0, r15
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <render+0x6e>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <render+0x6a>
 5a8:	80 95       	com	r24
 5aa:	85 b9       	out	0x05, r24	; 5
	PORTC = data;
 5ac:	78 b8       	out	0x08, r7	; 8
{
	const struct World *world = get_world();
	while(repetitions--) //it only displays correctly when multiplexing repeatedly
	{
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
 5ae:	f3 94       	inc	r15
 5b0:	f5 01       	movw	r30, r10
 5b2:	84 a1       	ldd	r24, Z+36	; 0x24
 5b4:	f8 16       	cp	r15, r24
 5b6:	10 f0       	brcs	.+4      	; 0x5bc <render+0x86>
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <render+0x92>
 5ba:	f1 2c       	mov	r15, r1
		{
			uint8_t data = 0;
			for(row = 0; row < world->height; row++)
 5bc:	f5 01       	movw	r30, r10
 5be:	e3 a0       	ldd	r14, Z+35	; 0x23
 5c0:	e1 10       	cpse	r14, r1
 5c2:	d4 cf       	rjmp	.-88     	; 0x56c <render+0x36>
 5c4:	71 2c       	mov	r7, r1
 5c6:	e9 cf       	rjmp	.-46     	; 0x59a <render+0x64>
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////-------------->RENDER GAME///////////////////////////////////////////////////
void render(int repetitions)
{
	const struct World *world = get_world();
	while(repetitions--) //it only displays correctly when multiplexing repeatedly
 5c8:	f1 e0       	ldi	r31, 0x01	; 1
 5ca:	8f 1a       	sub	r8, r31
 5cc:	91 08       	sbc	r9, r1
 5ce:	28 f0       	brcs	.+10     	; 0x5da <render+0xa4>
	{
		uint8_t col, row;
		for(col = 0; col < world->width; col++)
 5d0:	f5 01       	movw	r30, r10
 5d2:	84 a1       	ldd	r24, Z+36	; 0x24
 5d4:	81 11       	cpse	r24, r1
 5d6:	f1 cf       	rjmp	.-30     	; 0x5ba <render+0x84>
 5d8:	f7 cf       	rjmp	.-18     	; 0x5c8 <render+0x92>
				}
			}
			write_column(data, col);
		}
	}
}
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	df 90       	pop	r13
 5ec:	cf 90       	pop	r12
 5ee:	bf 90       	pop	r11
 5f0:	af 90       	pop	r10
 5f2:	9f 90       	pop	r9
 5f4:	8f 90       	pop	r8
 5f6:	7f 90       	pop	r7
 5f8:	08 95       	ret

000005fa <main>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////-------------->MAIN///////////////////////////////////////////////////
int main(void)
{
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	00 d0       	rcall	.+0      	; 0x600 <main+0x6>
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
	init_game();
 604:	0e 94 32 02 	call	0x464	; 0x464 <init_game>
{
	return world.state;
}
void set_state(enum State state)
{
	world.state = state;
 608:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <world+0x25>
////////////////////////////////////-------------->MAIN///////////////////////////////////////////////////
int main(void)
{
	init_game();
	set_state(GAME);
	struct Position direction = {.x = 0, .y = 1};
 60c:	19 82       	std	Y+1, r1	; 0x01
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	8a 83       	std	Y+2, r24	; 0x02
	init_matrix();
 612:	0e 94 90 02 	call	0x520	; 0x520 <init_matrix>
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////-------------->PAD///////////////////////////////////////////////////////
void init_dpad(void)
{
	DDRD = 0x00;
 616:	1a b8       	out	0x0a, r1	; 10
	init_game();
	set_state(GAME);
	struct Position direction = {.x = 0, .y = 1};
	init_matrix();
	init_dpad();
	uint8_t tick_interval = 10;
 618:	0f 2e       	mov	r0, r31
 61a:	fa e0       	ldi	r31, 0x0A	; 10
 61c:	ef 2e       	mov	r14, r31
 61e:	f0 2d       	mov	r31, r0
	} while (cell_at(&food) != EMPTY);
	set_cell(&food, FOOD);
}
enum State get_state(void)
{
	return world.state;
 620:	00 ea       	ldi	r16, 0xA0	; 160
 622:	11 e0       	ldi	r17, 0x01	; 1
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 624:	0f 2e       	mov	r0, r31
 626:	fe ef       	ldi	r31, 0xFE	; 254
 628:	6f 2e       	mov	r6, r31
 62a:	f0 2d       	mov	r31, r0
	PORTC = data;
 62c:	ff 24       	eor	r15, r15
 62e:	fa 94       	dec	r15
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 630:	0f 2e       	mov	r0, r31
 632:	fd ef       	ldi	r31, 0xFD	; 253
 634:	7f 2e       	mov	r7, r31
 636:	f0 2d       	mov	r31, r0
 638:	0f 2e       	mov	r0, r31
 63a:	fb ef       	ldi	r31, 0xFB	; 251
 63c:	8f 2e       	mov	r8, r31
 63e:	f0 2d       	mov	r31, r0
 640:	0f 2e       	mov	r0, r31
 642:	f7 ef       	ldi	r31, 0xF7	; 247
 644:	9f 2e       	mov	r9, r31
 646:	f0 2d       	mov	r31, r0
 648:	0f 2e       	mov	r0, r31
 64a:	ff ee       	ldi	r31, 0xEF	; 239
 64c:	af 2e       	mov	r10, r31
 64e:	f0 2d       	mov	r31, r0
 650:	0f 2e       	mov	r0, r31
 652:	ff ed       	ldi	r31, 0xDF	; 223
 654:	bf 2e       	mov	r11, r31
 656:	f0 2d       	mov	r31, r0
 658:	0f 2e       	mov	r0, r31
 65a:	ff eb       	ldi	r31, 0xBF	; 191
 65c:	cf 2e       	mov	r12, r31
 65e:	f0 2d       	mov	r31, r0
 660:	0f 2e       	mov	r0, r31
 662:	ff e7       	ldi	r31, 0x7F	; 127
 664:	df 2e       	mov	r13, r31
 666:	f0 2d       	mov	r31, r0
				direction.x = -1;
				direction.y = 0;
			}
			else if(button_pressed(RIGHT))
			{
				direction.x = 1;
 668:	55 24       	eor	r5, r5
 66a:	53 94       	inc	r5
 66c:	01 c0       	rjmp	.+2      	; 0x670 <main+0x76>
			/* pin change interrupt end */

			//this should be put in a timer interrupt
			render(5);
			_delay_ms(20);
			if(tick_interval-- == 0)
 66e:	ea 94       	dec	r14
	} while (cell_at(&food) != EMPTY);
	set_cell(&food, FOOD);
}
enum State get_state(void)
{
	return world.state;
 670:	f8 01       	movw	r30, r16
 672:	85 a1       	ldd	r24, Z+37	; 0x25
	init_matrix();
	init_dpad();
	uint8_t tick_interval = 10;
	for(;;)
	{
		if(get_state() == GAME)
 674:	81 11       	cpse	r24, r1
 676:	2a c0       	rjmp	.+84     	; 0x6cc <main+0xd2>
		{
			/* this should be put in a PCINT interrupt vector*/
			if(button_pressed(UP))
 678:	4b 9b       	sbis	0x09, 3	; 9
 67a:	03 c0       	rjmp	.+6      	; 0x682 <main+0x88>
			{
				direction.x = 0;
 67c:	19 82       	std	Y+1, r1	; 0x01
				direction.y = -1;
 67e:	fa 82       	std	Y+2, r15	; 0x02
 680:	0e c0       	rjmp	.+28     	; 0x69e <main+0xa4>
			}
			else if(button_pressed(DOWN))
 682:	48 9b       	sbis	0x09, 0	; 9
 684:	03 c0       	rjmp	.+6      	; 0x68c <main+0x92>
			{
				direction.x = 0;
 686:	19 82       	std	Y+1, r1	; 0x01
				direction.y = 1;
 688:	5a 82       	std	Y+2, r5	; 0x02
 68a:	09 c0       	rjmp	.+18     	; 0x69e <main+0xa4>
			}
			else if(button_pressed(LEFT))
 68c:	49 9b       	sbis	0x09, 1	; 9
 68e:	03 c0       	rjmp	.+6      	; 0x696 <main+0x9c>
			{
				direction.x = -1;
 690:	f9 82       	std	Y+1, r15	; 0x01
				direction.y = 0;
 692:	1a 82       	std	Y+2, r1	; 0x02
 694:	04 c0       	rjmp	.+8      	; 0x69e <main+0xa4>
			}
			else if(button_pressed(RIGHT))
 696:	4a 9b       	sbis	0x09, 2	; 9
 698:	02 c0       	rjmp	.+4      	; 0x69e <main+0xa4>
			{
				direction.x = 1;
 69a:	59 82       	std	Y+1, r5	; 0x01
				direction.y = 0;
 69c:	1a 82       	std	Y+2, r1	; 0x02
			}
			handle_keypress(&direction);
 69e:	ce 01       	movw	r24, r28
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	0e 94 53 00 	call	0xa6	; 0xa6 <handle_keypress>
			/* pin change interrupt end */

			//this should be put in a timer interrupt
			render(5);
 6a6:	85 e0       	ldi	r24, 0x05	; 5
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 9b 02 	call	0x536	; 0x536 <render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ae:	87 e8       	ldi	r24, 0x87	; 135
 6b0:	93 e1       	ldi	r25, 0x13	; 19
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <main+0xb8>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <main+0xbe>
 6b8:	00 00       	nop
			_delay_ms(20);
			if(tick_interval-- == 0)
 6ba:	e1 10       	cpse	r14, r1
 6bc:	d8 cf       	rjmp	.-80     	; 0x66e <main+0x74>
			{
				tick_interval = 10;
				tick();
 6be:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <tick>
			//this should be put in a timer interrupt
			render(5);
			_delay_ms(20);
			if(tick_interval-- == 0)
			{
				tick_interval = 10;
 6c2:	0f 2e       	mov	r0, r31
 6c4:	fa e0       	ldi	r31, 0x0A	; 10
 6c6:	ef 2e       	mov	r14, r31
 6c8:	f0 2d       	mov	r31, r0
 6ca:	d2 cf       	rjmp	.-92     	; 0x670 <main+0x76>
				tick();
			}
		}
		else if(get_state() == MENU)
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	81 f6       	brne	.-96     	; 0x670 <main+0x76>
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6d0:	65 b8       	out	0x05, r6	; 5
	PORTC = data;
 6d2:	f8 b8       	out	0x08, r15	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6d4:	75 b8       	out	0x05, r7	; 5
	PORTC = data;
 6d6:	f8 b8       	out	0x08, r15	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6d8:	85 b8       	out	0x05, r8	; 5
	PORTC = data;
 6da:	f8 b8       	out	0x08, r15	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6dc:	95 b8       	out	0x05, r9	; 5
	PORTC = data;
 6de:	f8 b8       	out	0x08, r15	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6e0:	a5 b8       	out	0x05, r10	; 5
	PORTC = data;
 6e2:	f8 b8       	out	0x08, r15	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6e4:	b5 b8       	out	0x05, r11	; 5
	PORTC = data;
 6e6:	f8 b8       	out	0x08, r15	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6e8:	c5 b8       	out	0x05, r12	; 5
	PORTC = data;
 6ea:	f8 b8       	out	0x08, r15	; 8
void write_column(uint8_t data, uint8_t column)
{
	//pulling a GND pin low and keeping all the others pulled high
	//this will cause that specific column of LEDs to turn on if their respective pins are pulled high
	//the image is drawn one column at a time, except it happens faster than what the human eye can keep up with
	PORTB = ~(1 << column);
 6ec:	d5 b8       	out	0x05, r13	; 5
	PORTC = data;
 6ee:	f8 b8       	out	0x08, r15	; 8
			write_column(0xFF, 3);
			write_column(0xFF, 4);
			write_column(0xFF, 5);
			write_column(0xFF, 6);
			write_column(0xFF, 7);
			if(any_pressed())
 6f0:	0e 94 95 02 	call	0x52a	; 0x52a <any_pressed>
 6f4:	88 23       	and	r24, r24
 6f6:	09 f4       	brne	.+2      	; 0x6fa <main+0x100>
 6f8:	bb cf       	rjmp	.-138    	; 0x670 <main+0x76>
{
	return world.state;
}
void set_state(enum State state)
{
	world.state = state;
 6fa:	f8 01       	movw	r30, r16
 6fc:	15 a2       	std	Z+37, r1	; 0x25
			write_column(0xFF, 6);
			write_column(0xFF, 7);
			if(any_pressed())
			{
				set_state(GAME);
				init_game();
 6fe:	0e 94 32 02 	call	0x464	; 0x464 <init_game>
 702:	b6 cf       	rjmp	.-148    	; 0x670 <main+0x76>

00000704 <__divmodhi4>:
 704:	97 fb       	bst	r25, 7
 706:	07 2e       	mov	r0, r23
 708:	16 f4       	brtc	.+4      	; 0x70e <__divmodhi4+0xa>
 70a:	00 94       	com	r0
 70c:	07 d0       	rcall	.+14     	; 0x71c <__divmodhi4_neg1>
 70e:	77 fd       	sbrc	r23, 7
 710:	09 d0       	rcall	.+18     	; 0x724 <__divmodhi4_neg2>
 712:	0e 94 96 03 	call	0x72c	; 0x72c <__udivmodhi4>
 716:	07 fc       	sbrc	r0, 7
 718:	05 d0       	rcall	.+10     	; 0x724 <__divmodhi4_neg2>
 71a:	3e f4       	brtc	.+14     	; 0x72a <__divmodhi4_exit>

0000071c <__divmodhi4_neg1>:
 71c:	90 95       	com	r25
 71e:	81 95       	neg	r24
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	08 95       	ret

00000724 <__divmodhi4_neg2>:
 724:	70 95       	com	r23
 726:	61 95       	neg	r22
 728:	7f 4f       	sbci	r23, 0xFF	; 255

0000072a <__divmodhi4_exit>:
 72a:	08 95       	ret

0000072c <__udivmodhi4>:
 72c:	aa 1b       	sub	r26, r26
 72e:	bb 1b       	sub	r27, r27
 730:	51 e1       	ldi	r21, 0x11	; 17
 732:	07 c0       	rjmp	.+14     	; 0x742 <__udivmodhi4_ep>

00000734 <__udivmodhi4_loop>:
 734:	aa 1f       	adc	r26, r26
 736:	bb 1f       	adc	r27, r27
 738:	a6 17       	cp	r26, r22
 73a:	b7 07       	cpc	r27, r23
 73c:	10 f0       	brcs	.+4      	; 0x742 <__udivmodhi4_ep>
 73e:	a6 1b       	sub	r26, r22
 740:	b7 0b       	sbc	r27, r23

00000742 <__udivmodhi4_ep>:
 742:	88 1f       	adc	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	5a 95       	dec	r21
 748:	a9 f7       	brne	.-22     	; 0x734 <__udivmodhi4_loop>
 74a:	80 95       	com	r24
 74c:	90 95       	com	r25
 74e:	bc 01       	movw	r22, r24
 750:	cd 01       	movw	r24, r26
 752:	08 95       	ret

00000754 <do_rand>:
 754:	8f 92       	push	r8
 756:	9f 92       	push	r9
 758:	af 92       	push	r10
 75a:	bf 92       	push	r11
 75c:	cf 92       	push	r12
 75e:	df 92       	push	r13
 760:	ef 92       	push	r14
 762:	ff 92       	push	r15
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	ec 01       	movw	r28, r24
 76a:	68 81       	ld	r22, Y
 76c:	79 81       	ldd	r23, Y+1	; 0x01
 76e:	8a 81       	ldd	r24, Y+2	; 0x02
 770:	9b 81       	ldd	r25, Y+3	; 0x03
 772:	61 15       	cp	r22, r1
 774:	71 05       	cpc	r23, r1
 776:	81 05       	cpc	r24, r1
 778:	91 05       	cpc	r25, r1
 77a:	21 f4       	brne	.+8      	; 0x784 <do_rand+0x30>
 77c:	64 e2       	ldi	r22, 0x24	; 36
 77e:	79 ed       	ldi	r23, 0xD9	; 217
 780:	8b e5       	ldi	r24, 0x5B	; 91
 782:	97 e0       	ldi	r25, 0x07	; 7
 784:	2d e1       	ldi	r18, 0x1D	; 29
 786:	33 ef       	ldi	r19, 0xF3	; 243
 788:	41 e0       	ldi	r20, 0x01	; 1
 78a:	50 e0       	ldi	r21, 0x00	; 0
 78c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__divmodsi4>
 790:	49 01       	movw	r8, r18
 792:	5a 01       	movw	r10, r20
 794:	9b 01       	movw	r18, r22
 796:	ac 01       	movw	r20, r24
 798:	a7 ea       	ldi	r26, 0xA7	; 167
 79a:	b1 e4       	ldi	r27, 0x41	; 65
 79c:	0e 94 cc 06 	call	0xd98	; 0xd98 <__muluhisi3>
 7a0:	6b 01       	movw	r12, r22
 7a2:	7c 01       	movw	r14, r24
 7a4:	ac ee       	ldi	r26, 0xEC	; 236
 7a6:	b4 ef       	ldi	r27, 0xF4	; 244
 7a8:	a5 01       	movw	r20, r10
 7aa:	94 01       	movw	r18, r8
 7ac:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulohisi3>
 7b0:	dc 01       	movw	r26, r24
 7b2:	cb 01       	movw	r24, r22
 7b4:	8c 0d       	add	r24, r12
 7b6:	9d 1d       	adc	r25, r13
 7b8:	ae 1d       	adc	r26, r14
 7ba:	bf 1d       	adc	r27, r15
 7bc:	b7 ff       	sbrs	r27, 7
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <do_rand+0x72>
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	a1 09       	sbc	r26, r1
 7c4:	b0 48       	sbci	r27, 0x80	; 128
 7c6:	88 83       	st	Y, r24
 7c8:	99 83       	std	Y+1, r25	; 0x01
 7ca:	aa 83       	std	Y+2, r26	; 0x02
 7cc:	bb 83       	std	Y+3, r27	; 0x03
 7ce:	9f 77       	andi	r25, 0x7F	; 127
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	ff 90       	pop	r15
 7d6:	ef 90       	pop	r14
 7d8:	df 90       	pop	r13
 7da:	cf 90       	pop	r12
 7dc:	bf 90       	pop	r11
 7de:	af 90       	pop	r10
 7e0:	9f 90       	pop	r9
 7e2:	8f 90       	pop	r8
 7e4:	08 95       	ret

000007e6 <rand_r>:
 7e6:	0e 94 aa 03 	call	0x754	; 0x754 <do_rand>
 7ea:	08 95       	ret

000007ec <rand>:
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	91 e0       	ldi	r25, 0x01	; 1
 7f0:	0e 94 aa 03 	call	0x754	; 0x754 <do_rand>
 7f4:	08 95       	ret

000007f6 <srand>:
 7f6:	a0 e0       	ldi	r26, 0x00	; 0
 7f8:	b0 e0       	ldi	r27, 0x00	; 0
 7fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 7fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 802:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 806:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 80a:	08 95       	ret

0000080c <printf>:
 80c:	a0 e0       	ldi	r26, 0x00	; 0
 80e:	b0 e0       	ldi	r27, 0x00	; 0
 810:	ec e0       	ldi	r30, 0x0C	; 12
 812:	f4 e0       	ldi	r31, 0x04	; 4
 814:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__prologue_saves__+0x20>
 818:	ae 01       	movw	r20, r28
 81a:	4b 5f       	subi	r20, 0xFB	; 251
 81c:	5f 4f       	sbci	r21, 0xFF	; 255
 81e:	fa 01       	movw	r30, r20
 820:	61 91       	ld	r22, Z+
 822:	71 91       	ld	r23, Z+
 824:	af 01       	movw	r20, r30
 826:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__iob+0x2>
 82a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__iob+0x3>
 82e:	0e 94 1c 04 	call	0x838	; 0x838 <vfprintf>
 832:	e2 e0       	ldi	r30, 0x02	; 2
 834:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__epilogue_restores__+0x20>

00000838 <vfprintf>:
 838:	ab e0       	ldi	r26, 0x0B	; 11
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	e2 e2       	ldi	r30, 0x22	; 34
 83e:	f4 e0       	ldi	r31, 0x04	; 4
 840:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__prologue_saves__>
 844:	6c 01       	movw	r12, r24
 846:	7b 01       	movw	r14, r22
 848:	8a 01       	movw	r16, r20
 84a:	fc 01       	movw	r30, r24
 84c:	17 82       	std	Z+7, r1	; 0x07
 84e:	16 82       	std	Z+6, r1	; 0x06
 850:	83 81       	ldd	r24, Z+3	; 0x03
 852:	81 ff       	sbrs	r24, 1
 854:	cc c1       	rjmp	.+920    	; 0xbee <__stack+0x2ef>
 856:	ce 01       	movw	r24, r28
 858:	01 96       	adiw	r24, 0x01	; 1
 85a:	3c 01       	movw	r6, r24
 85c:	f6 01       	movw	r30, r12
 85e:	93 81       	ldd	r25, Z+3	; 0x03
 860:	f7 01       	movw	r30, r14
 862:	93 fd       	sbrc	r25, 3
 864:	85 91       	lpm	r24, Z+
 866:	93 ff       	sbrs	r25, 3
 868:	81 91       	ld	r24, Z+
 86a:	7f 01       	movw	r14, r30
 86c:	88 23       	and	r24, r24
 86e:	09 f4       	brne	.+2      	; 0x872 <vfprintf+0x3a>
 870:	ba c1       	rjmp	.+884    	; 0xbe6 <__stack+0x2e7>
 872:	85 32       	cpi	r24, 0x25	; 37
 874:	39 f4       	brne	.+14     	; 0x884 <vfprintf+0x4c>
 876:	93 fd       	sbrc	r25, 3
 878:	85 91       	lpm	r24, Z+
 87a:	93 ff       	sbrs	r25, 3
 87c:	81 91       	ld	r24, Z+
 87e:	7f 01       	movw	r14, r30
 880:	85 32       	cpi	r24, 0x25	; 37
 882:	29 f4       	brne	.+10     	; 0x88e <vfprintf+0x56>
 884:	b6 01       	movw	r22, r12
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 88c:	e7 cf       	rjmp	.-50     	; 0x85c <vfprintf+0x24>
 88e:	91 2c       	mov	r9, r1
 890:	21 2c       	mov	r2, r1
 892:	31 2c       	mov	r3, r1
 894:	ff e1       	ldi	r31, 0x1F	; 31
 896:	f3 15       	cp	r31, r3
 898:	d8 f0       	brcs	.+54     	; 0x8d0 <vfprintf+0x98>
 89a:	8b 32       	cpi	r24, 0x2B	; 43
 89c:	79 f0       	breq	.+30     	; 0x8bc <vfprintf+0x84>
 89e:	38 f4       	brcc	.+14     	; 0x8ae <vfprintf+0x76>
 8a0:	80 32       	cpi	r24, 0x20	; 32
 8a2:	79 f0       	breq	.+30     	; 0x8c2 <vfprintf+0x8a>
 8a4:	83 32       	cpi	r24, 0x23	; 35
 8a6:	a1 f4       	brne	.+40     	; 0x8d0 <vfprintf+0x98>
 8a8:	23 2d       	mov	r18, r3
 8aa:	20 61       	ori	r18, 0x10	; 16
 8ac:	1d c0       	rjmp	.+58     	; 0x8e8 <vfprintf+0xb0>
 8ae:	8d 32       	cpi	r24, 0x2D	; 45
 8b0:	61 f0       	breq	.+24     	; 0x8ca <vfprintf+0x92>
 8b2:	80 33       	cpi	r24, 0x30	; 48
 8b4:	69 f4       	brne	.+26     	; 0x8d0 <vfprintf+0x98>
 8b6:	23 2d       	mov	r18, r3
 8b8:	21 60       	ori	r18, 0x01	; 1
 8ba:	16 c0       	rjmp	.+44     	; 0x8e8 <vfprintf+0xb0>
 8bc:	83 2d       	mov	r24, r3
 8be:	82 60       	ori	r24, 0x02	; 2
 8c0:	38 2e       	mov	r3, r24
 8c2:	e3 2d       	mov	r30, r3
 8c4:	e4 60       	ori	r30, 0x04	; 4
 8c6:	3e 2e       	mov	r3, r30
 8c8:	2a c0       	rjmp	.+84     	; 0x91e <__stack+0x1f>
 8ca:	f3 2d       	mov	r31, r3
 8cc:	f8 60       	ori	r31, 0x08	; 8
 8ce:	1d c0       	rjmp	.+58     	; 0x90a <__stack+0xb>
 8d0:	37 fc       	sbrc	r3, 7
 8d2:	2d c0       	rjmp	.+90     	; 0x92e <__stack+0x2f>
 8d4:	20 ed       	ldi	r18, 0xD0	; 208
 8d6:	28 0f       	add	r18, r24
 8d8:	2a 30       	cpi	r18, 0x0A	; 10
 8da:	40 f0       	brcs	.+16     	; 0x8ec <vfprintf+0xb4>
 8dc:	8e 32       	cpi	r24, 0x2E	; 46
 8de:	b9 f4       	brne	.+46     	; 0x90e <__stack+0xf>
 8e0:	36 fc       	sbrc	r3, 6
 8e2:	81 c1       	rjmp	.+770    	; 0xbe6 <__stack+0x2e7>
 8e4:	23 2d       	mov	r18, r3
 8e6:	20 64       	ori	r18, 0x40	; 64
 8e8:	32 2e       	mov	r3, r18
 8ea:	19 c0       	rjmp	.+50     	; 0x91e <__stack+0x1f>
 8ec:	36 fe       	sbrs	r3, 6
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <vfprintf+0xc4>
 8f0:	8a e0       	ldi	r24, 0x0A	; 10
 8f2:	98 9e       	mul	r9, r24
 8f4:	20 0d       	add	r18, r0
 8f6:	11 24       	eor	r1, r1
 8f8:	92 2e       	mov	r9, r18
 8fa:	11 c0       	rjmp	.+34     	; 0x91e <__stack+0x1f>
 8fc:	ea e0       	ldi	r30, 0x0A	; 10
 8fe:	2e 9e       	mul	r2, r30
 900:	20 0d       	add	r18, r0
 902:	11 24       	eor	r1, r1
 904:	22 2e       	mov	r2, r18
 906:	f3 2d       	mov	r31, r3
 908:	f0 62       	ori	r31, 0x20	; 32
 90a:	3f 2e       	mov	r3, r31
 90c:	08 c0       	rjmp	.+16     	; 0x91e <__stack+0x1f>
 90e:	8c 36       	cpi	r24, 0x6C	; 108
 910:	21 f4       	brne	.+8      	; 0x91a <__stack+0x1b>
 912:	83 2d       	mov	r24, r3
 914:	80 68       	ori	r24, 0x80	; 128
 916:	38 2e       	mov	r3, r24
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
 91a:	88 36       	cpi	r24, 0x68	; 104
 91c:	41 f4       	brne	.+16     	; 0x92e <__stack+0x2f>
 91e:	f7 01       	movw	r30, r14
 920:	93 fd       	sbrc	r25, 3
 922:	85 91       	lpm	r24, Z+
 924:	93 ff       	sbrs	r25, 3
 926:	81 91       	ld	r24, Z+
 928:	7f 01       	movw	r14, r30
 92a:	81 11       	cpse	r24, r1
 92c:	b3 cf       	rjmp	.-154    	; 0x894 <vfprintf+0x5c>
 92e:	98 2f       	mov	r25, r24
 930:	9f 7d       	andi	r25, 0xDF	; 223
 932:	95 54       	subi	r25, 0x45	; 69
 934:	93 30       	cpi	r25, 0x03	; 3
 936:	28 f4       	brcc	.+10     	; 0x942 <__stack+0x43>
 938:	0c 5f       	subi	r16, 0xFC	; 252
 93a:	1f 4f       	sbci	r17, 0xFF	; 255
 93c:	9f e3       	ldi	r25, 0x3F	; 63
 93e:	99 83       	std	Y+1, r25	; 0x01
 940:	0d c0       	rjmp	.+26     	; 0x95c <__stack+0x5d>
 942:	83 36       	cpi	r24, 0x63	; 99
 944:	31 f0       	breq	.+12     	; 0x952 <__stack+0x53>
 946:	83 37       	cpi	r24, 0x73	; 115
 948:	71 f0       	breq	.+28     	; 0x966 <__stack+0x67>
 94a:	83 35       	cpi	r24, 0x53	; 83
 94c:	09 f0       	breq	.+2      	; 0x950 <__stack+0x51>
 94e:	59 c0       	rjmp	.+178    	; 0xa02 <__stack+0x103>
 950:	21 c0       	rjmp	.+66     	; 0x994 <__stack+0x95>
 952:	f8 01       	movw	r30, r16
 954:	80 81       	ld	r24, Z
 956:	89 83       	std	Y+1, r24	; 0x01
 958:	0e 5f       	subi	r16, 0xFE	; 254
 95a:	1f 4f       	sbci	r17, 0xFF	; 255
 95c:	88 24       	eor	r8, r8
 95e:	83 94       	inc	r8
 960:	91 2c       	mov	r9, r1
 962:	53 01       	movw	r10, r6
 964:	13 c0       	rjmp	.+38     	; 0x98c <__stack+0x8d>
 966:	28 01       	movw	r4, r16
 968:	f2 e0       	ldi	r31, 0x02	; 2
 96a:	4f 0e       	add	r4, r31
 96c:	51 1c       	adc	r5, r1
 96e:	f8 01       	movw	r30, r16
 970:	a0 80       	ld	r10, Z
 972:	b1 80       	ldd	r11, Z+1	; 0x01
 974:	36 fe       	sbrs	r3, 6
 976:	03 c0       	rjmp	.+6      	; 0x97e <__stack+0x7f>
 978:	69 2d       	mov	r22, r9
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x83>
 97e:	6f ef       	ldi	r22, 0xFF	; 255
 980:	7f ef       	ldi	r23, 0xFF	; 255
 982:	c5 01       	movw	r24, r10
 984:	0e 94 08 06 	call	0xc10	; 0xc10 <strnlen>
 988:	4c 01       	movw	r8, r24
 98a:	82 01       	movw	r16, r4
 98c:	f3 2d       	mov	r31, r3
 98e:	ff 77       	andi	r31, 0x7F	; 127
 990:	3f 2e       	mov	r3, r31
 992:	16 c0       	rjmp	.+44     	; 0x9c0 <__stack+0xc1>
 994:	28 01       	movw	r4, r16
 996:	22 e0       	ldi	r18, 0x02	; 2
 998:	42 0e       	add	r4, r18
 99a:	51 1c       	adc	r5, r1
 99c:	f8 01       	movw	r30, r16
 99e:	a0 80       	ld	r10, Z
 9a0:	b1 80       	ldd	r11, Z+1	; 0x01
 9a2:	36 fe       	sbrs	r3, 6
 9a4:	03 c0       	rjmp	.+6      	; 0x9ac <__stack+0xad>
 9a6:	69 2d       	mov	r22, r9
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0xb1>
 9ac:	6f ef       	ldi	r22, 0xFF	; 255
 9ae:	7f ef       	ldi	r23, 0xFF	; 255
 9b0:	c5 01       	movw	r24, r10
 9b2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <strnlen_P>
 9b6:	4c 01       	movw	r8, r24
 9b8:	f3 2d       	mov	r31, r3
 9ba:	f0 68       	ori	r31, 0x80	; 128
 9bc:	3f 2e       	mov	r3, r31
 9be:	82 01       	movw	r16, r4
 9c0:	33 fc       	sbrc	r3, 3
 9c2:	1b c0       	rjmp	.+54     	; 0x9fa <__stack+0xfb>
 9c4:	82 2d       	mov	r24, r2
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	88 16       	cp	r8, r24
 9ca:	99 06       	cpc	r9, r25
 9cc:	b0 f4       	brcc	.+44     	; 0x9fa <__stack+0xfb>
 9ce:	b6 01       	movw	r22, r12
 9d0:	80 e2       	ldi	r24, 0x20	; 32
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 9d8:	2a 94       	dec	r2
 9da:	f4 cf       	rjmp	.-24     	; 0x9c4 <__stack+0xc5>
 9dc:	f5 01       	movw	r30, r10
 9de:	37 fc       	sbrc	r3, 7
 9e0:	85 91       	lpm	r24, Z+
 9e2:	37 fe       	sbrs	r3, 7
 9e4:	81 91       	ld	r24, Z+
 9e6:	5f 01       	movw	r10, r30
 9e8:	b6 01       	movw	r22, r12
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 9f0:	21 10       	cpse	r2, r1
 9f2:	2a 94       	dec	r2
 9f4:	21 e0       	ldi	r18, 0x01	; 1
 9f6:	82 1a       	sub	r8, r18
 9f8:	91 08       	sbc	r9, r1
 9fa:	81 14       	cp	r8, r1
 9fc:	91 04       	cpc	r9, r1
 9fe:	71 f7       	brne	.-36     	; 0x9dc <__stack+0xdd>
 a00:	e8 c0       	rjmp	.+464    	; 0xbd2 <__stack+0x2d3>
 a02:	84 36       	cpi	r24, 0x64	; 100
 a04:	11 f0       	breq	.+4      	; 0xa0a <__stack+0x10b>
 a06:	89 36       	cpi	r24, 0x69	; 105
 a08:	41 f5       	brne	.+80     	; 0xa5a <__stack+0x15b>
 a0a:	f8 01       	movw	r30, r16
 a0c:	37 fe       	sbrs	r3, 7
 a0e:	07 c0       	rjmp	.+14     	; 0xa1e <__stack+0x11f>
 a10:	60 81       	ld	r22, Z
 a12:	71 81       	ldd	r23, Z+1	; 0x01
 a14:	82 81       	ldd	r24, Z+2	; 0x02
 a16:	93 81       	ldd	r25, Z+3	; 0x03
 a18:	0c 5f       	subi	r16, 0xFC	; 252
 a1a:	1f 4f       	sbci	r17, 0xFF	; 255
 a1c:	08 c0       	rjmp	.+16     	; 0xa2e <__stack+0x12f>
 a1e:	60 81       	ld	r22, Z
 a20:	71 81       	ldd	r23, Z+1	; 0x01
 a22:	07 2e       	mov	r0, r23
 a24:	00 0c       	add	r0, r0
 a26:	88 0b       	sbc	r24, r24
 a28:	99 0b       	sbc	r25, r25
 a2a:	0e 5f       	subi	r16, 0xFE	; 254
 a2c:	1f 4f       	sbci	r17, 0xFF	; 255
 a2e:	f3 2d       	mov	r31, r3
 a30:	ff 76       	andi	r31, 0x6F	; 111
 a32:	3f 2e       	mov	r3, r31
 a34:	97 ff       	sbrs	r25, 7
 a36:	09 c0       	rjmp	.+18     	; 0xa4a <__stack+0x14b>
 a38:	90 95       	com	r25
 a3a:	80 95       	com	r24
 a3c:	70 95       	com	r23
 a3e:	61 95       	neg	r22
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	f0 68       	ori	r31, 0x80	; 128
 a48:	3f 2e       	mov	r3, r31
 a4a:	2a e0       	ldi	r18, 0x0A	; 10
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	a3 01       	movw	r20, r6
 a50:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__ultoa_invert>
 a54:	88 2e       	mov	r8, r24
 a56:	86 18       	sub	r8, r6
 a58:	45 c0       	rjmp	.+138    	; 0xae4 <__stack+0x1e5>
 a5a:	85 37       	cpi	r24, 0x75	; 117
 a5c:	31 f4       	brne	.+12     	; 0xa6a <__stack+0x16b>
 a5e:	23 2d       	mov	r18, r3
 a60:	2f 7e       	andi	r18, 0xEF	; 239
 a62:	b2 2e       	mov	r11, r18
 a64:	2a e0       	ldi	r18, 0x0A	; 10
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	25 c0       	rjmp	.+74     	; 0xab4 <__stack+0x1b5>
 a6a:	93 2d       	mov	r25, r3
 a6c:	99 7f       	andi	r25, 0xF9	; 249
 a6e:	b9 2e       	mov	r11, r25
 a70:	8f 36       	cpi	r24, 0x6F	; 111
 a72:	c1 f0       	breq	.+48     	; 0xaa4 <__stack+0x1a5>
 a74:	18 f4       	brcc	.+6      	; 0xa7c <__stack+0x17d>
 a76:	88 35       	cpi	r24, 0x58	; 88
 a78:	79 f0       	breq	.+30     	; 0xa98 <__stack+0x199>
 a7a:	b5 c0       	rjmp	.+362    	; 0xbe6 <__stack+0x2e7>
 a7c:	80 37       	cpi	r24, 0x70	; 112
 a7e:	19 f0       	breq	.+6      	; 0xa86 <__stack+0x187>
 a80:	88 37       	cpi	r24, 0x78	; 120
 a82:	21 f0       	breq	.+8      	; 0xa8c <__stack+0x18d>
 a84:	b0 c0       	rjmp	.+352    	; 0xbe6 <__stack+0x2e7>
 a86:	e9 2f       	mov	r30, r25
 a88:	e0 61       	ori	r30, 0x10	; 16
 a8a:	be 2e       	mov	r11, r30
 a8c:	b4 fe       	sbrs	r11, 4
 a8e:	0d c0       	rjmp	.+26     	; 0xaaa <__stack+0x1ab>
 a90:	fb 2d       	mov	r31, r11
 a92:	f4 60       	ori	r31, 0x04	; 4
 a94:	bf 2e       	mov	r11, r31
 a96:	09 c0       	rjmp	.+18     	; 0xaaa <__stack+0x1ab>
 a98:	34 fe       	sbrs	r3, 4
 a9a:	0a c0       	rjmp	.+20     	; 0xab0 <__stack+0x1b1>
 a9c:	29 2f       	mov	r18, r25
 a9e:	26 60       	ori	r18, 0x06	; 6
 aa0:	b2 2e       	mov	r11, r18
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <__stack+0x1b1>
 aa4:	28 e0       	ldi	r18, 0x08	; 8
 aa6:	30 e0       	ldi	r19, 0x00	; 0
 aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__stack+0x1b5>
 aaa:	20 e1       	ldi	r18, 0x10	; 16
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	02 c0       	rjmp	.+4      	; 0xab4 <__stack+0x1b5>
 ab0:	20 e1       	ldi	r18, 0x10	; 16
 ab2:	32 e0       	ldi	r19, 0x02	; 2
 ab4:	f8 01       	movw	r30, r16
 ab6:	b7 fe       	sbrs	r11, 7
 ab8:	07 c0       	rjmp	.+14     	; 0xac8 <__stack+0x1c9>
 aba:	60 81       	ld	r22, Z
 abc:	71 81       	ldd	r23, Z+1	; 0x01
 abe:	82 81       	ldd	r24, Z+2	; 0x02
 ac0:	93 81       	ldd	r25, Z+3	; 0x03
 ac2:	0c 5f       	subi	r16, 0xFC	; 252
 ac4:	1f 4f       	sbci	r17, 0xFF	; 255
 ac6:	06 c0       	rjmp	.+12     	; 0xad4 <__stack+0x1d5>
 ac8:	60 81       	ld	r22, Z
 aca:	71 81       	ldd	r23, Z+1	; 0x01
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	0e 5f       	subi	r16, 0xFE	; 254
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	a3 01       	movw	r20, r6
 ad6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__ultoa_invert>
 ada:	88 2e       	mov	r8, r24
 adc:	86 18       	sub	r8, r6
 ade:	fb 2d       	mov	r31, r11
 ae0:	ff 77       	andi	r31, 0x7F	; 127
 ae2:	3f 2e       	mov	r3, r31
 ae4:	36 fe       	sbrs	r3, 6
 ae6:	0d c0       	rjmp	.+26     	; 0xb02 <__stack+0x203>
 ae8:	23 2d       	mov	r18, r3
 aea:	2e 7f       	andi	r18, 0xFE	; 254
 aec:	a2 2e       	mov	r10, r18
 aee:	89 14       	cp	r8, r9
 af0:	58 f4       	brcc	.+22     	; 0xb08 <__stack+0x209>
 af2:	34 fe       	sbrs	r3, 4
 af4:	0b c0       	rjmp	.+22     	; 0xb0c <__stack+0x20d>
 af6:	32 fc       	sbrc	r3, 2
 af8:	09 c0       	rjmp	.+18     	; 0xb0c <__stack+0x20d>
 afa:	83 2d       	mov	r24, r3
 afc:	8e 7e       	andi	r24, 0xEE	; 238
 afe:	a8 2e       	mov	r10, r24
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <__stack+0x20d>
 b02:	b8 2c       	mov	r11, r8
 b04:	a3 2c       	mov	r10, r3
 b06:	03 c0       	rjmp	.+6      	; 0xb0e <__stack+0x20f>
 b08:	b8 2c       	mov	r11, r8
 b0a:	01 c0       	rjmp	.+2      	; 0xb0e <__stack+0x20f>
 b0c:	b9 2c       	mov	r11, r9
 b0e:	a4 fe       	sbrs	r10, 4
 b10:	0f c0       	rjmp	.+30     	; 0xb30 <__stack+0x231>
 b12:	fe 01       	movw	r30, r28
 b14:	e8 0d       	add	r30, r8
 b16:	f1 1d       	adc	r31, r1
 b18:	80 81       	ld	r24, Z
 b1a:	80 33       	cpi	r24, 0x30	; 48
 b1c:	21 f4       	brne	.+8      	; 0xb26 <__stack+0x227>
 b1e:	9a 2d       	mov	r25, r10
 b20:	99 7e       	andi	r25, 0xE9	; 233
 b22:	a9 2e       	mov	r10, r25
 b24:	09 c0       	rjmp	.+18     	; 0xb38 <__stack+0x239>
 b26:	a2 fe       	sbrs	r10, 2
 b28:	06 c0       	rjmp	.+12     	; 0xb36 <__stack+0x237>
 b2a:	b3 94       	inc	r11
 b2c:	b3 94       	inc	r11
 b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__stack+0x239>
 b30:	8a 2d       	mov	r24, r10
 b32:	86 78       	andi	r24, 0x86	; 134
 b34:	09 f0       	breq	.+2      	; 0xb38 <__stack+0x239>
 b36:	b3 94       	inc	r11
 b38:	a3 fc       	sbrc	r10, 3
 b3a:	11 c0       	rjmp	.+34     	; 0xb5e <__stack+0x25f>
 b3c:	a0 fe       	sbrs	r10, 0
 b3e:	06 c0       	rjmp	.+12     	; 0xb4c <__stack+0x24d>
 b40:	b2 14       	cp	r11, r2
 b42:	88 f4       	brcc	.+34     	; 0xb66 <__stack+0x267>
 b44:	28 0c       	add	r2, r8
 b46:	92 2c       	mov	r9, r2
 b48:	9b 18       	sub	r9, r11
 b4a:	0e c0       	rjmp	.+28     	; 0xb68 <__stack+0x269>
 b4c:	b2 14       	cp	r11, r2
 b4e:	60 f4       	brcc	.+24     	; 0xb68 <__stack+0x269>
 b50:	b6 01       	movw	r22, r12
 b52:	80 e2       	ldi	r24, 0x20	; 32
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 b5a:	b3 94       	inc	r11
 b5c:	f7 cf       	rjmp	.-18     	; 0xb4c <__stack+0x24d>
 b5e:	b2 14       	cp	r11, r2
 b60:	18 f4       	brcc	.+6      	; 0xb68 <__stack+0x269>
 b62:	2b 18       	sub	r2, r11
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <__stack+0x26b>
 b66:	98 2c       	mov	r9, r8
 b68:	21 2c       	mov	r2, r1
 b6a:	a4 fe       	sbrs	r10, 4
 b6c:	10 c0       	rjmp	.+32     	; 0xb8e <__stack+0x28f>
 b6e:	b6 01       	movw	r22, r12
 b70:	80 e3       	ldi	r24, 0x30	; 48
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 b78:	a2 fe       	sbrs	r10, 2
 b7a:	17 c0       	rjmp	.+46     	; 0xbaa <__stack+0x2ab>
 b7c:	a1 fc       	sbrc	r10, 1
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <__stack+0x287>
 b80:	88 e7       	ldi	r24, 0x78	; 120
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <__stack+0x28b>
 b86:	88 e5       	ldi	r24, 0x58	; 88
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	b6 01       	movw	r22, r12
 b8c:	0c c0       	rjmp	.+24     	; 0xba6 <__stack+0x2a7>
 b8e:	8a 2d       	mov	r24, r10
 b90:	86 78       	andi	r24, 0x86	; 134
 b92:	59 f0       	breq	.+22     	; 0xbaa <__stack+0x2ab>
 b94:	a1 fe       	sbrs	r10, 1
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <__stack+0x29d>
 b98:	8b e2       	ldi	r24, 0x2B	; 43
 b9a:	01 c0       	rjmp	.+2      	; 0xb9e <__stack+0x29f>
 b9c:	80 e2       	ldi	r24, 0x20	; 32
 b9e:	a7 fc       	sbrc	r10, 7
 ba0:	8d e2       	ldi	r24, 0x2D	; 45
 ba2:	b6 01       	movw	r22, r12
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 baa:	89 14       	cp	r8, r9
 bac:	38 f4       	brcc	.+14     	; 0xbbc <__stack+0x2bd>
 bae:	b6 01       	movw	r22, r12
 bb0:	80 e3       	ldi	r24, 0x30	; 48
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 bb8:	9a 94       	dec	r9
 bba:	f7 cf       	rjmp	.-18     	; 0xbaa <__stack+0x2ab>
 bbc:	8a 94       	dec	r8
 bbe:	f3 01       	movw	r30, r6
 bc0:	e8 0d       	add	r30, r8
 bc2:	f1 1d       	adc	r31, r1
 bc4:	80 81       	ld	r24, Z
 bc6:	b6 01       	movw	r22, r12
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 bce:	81 10       	cpse	r8, r1
 bd0:	f5 cf       	rjmp	.-22     	; 0xbbc <__stack+0x2bd>
 bd2:	22 20       	and	r2, r2
 bd4:	09 f4       	brne	.+2      	; 0xbd8 <__stack+0x2d9>
 bd6:	42 ce       	rjmp	.-892    	; 0x85c <vfprintf+0x24>
 bd8:	b6 01       	movw	r22, r12
 bda:	80 e2       	ldi	r24, 0x20	; 32
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 be2:	2a 94       	dec	r2
 be4:	f6 cf       	rjmp	.-20     	; 0xbd2 <__stack+0x2d3>
 be6:	f6 01       	movw	r30, r12
 be8:	86 81       	ldd	r24, Z+6	; 0x06
 bea:	97 81       	ldd	r25, Z+7	; 0x07
 bec:	02 c0       	rjmp	.+4      	; 0xbf2 <__stack+0x2f3>
 bee:	8f ef       	ldi	r24, 0xFF	; 255
 bf0:	9f ef       	ldi	r25, 0xFF	; 255
 bf2:	2b 96       	adiw	r28, 0x0b	; 11
 bf4:	e2 e1       	ldi	r30, 0x12	; 18
 bf6:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__epilogue_restores__>

00000bfa <strnlen_P>:
 bfa:	fc 01       	movw	r30, r24
 bfc:	05 90       	lpm	r0, Z+
 bfe:	61 50       	subi	r22, 0x01	; 1
 c00:	70 40       	sbci	r23, 0x00	; 0
 c02:	01 10       	cpse	r0, r1
 c04:	d8 f7       	brcc	.-10     	; 0xbfc <strnlen_P+0x2>
 c06:	80 95       	com	r24
 c08:	90 95       	com	r25
 c0a:	8e 0f       	add	r24, r30
 c0c:	9f 1f       	adc	r25, r31
 c0e:	08 95       	ret

00000c10 <strnlen>:
 c10:	fc 01       	movw	r30, r24
 c12:	61 50       	subi	r22, 0x01	; 1
 c14:	70 40       	sbci	r23, 0x00	; 0
 c16:	01 90       	ld	r0, Z+
 c18:	01 10       	cpse	r0, r1
 c1a:	d8 f7       	brcc	.-10     	; 0xc12 <strnlen+0x2>
 c1c:	80 95       	com	r24
 c1e:	90 95       	com	r25
 c20:	8e 0f       	add	r24, r30
 c22:	9f 1f       	adc	r25, r31
 c24:	08 95       	ret

00000c26 <fputc>:
 c26:	0f 93       	push	r16
 c28:	1f 93       	push	r17
 c2a:	cf 93       	push	r28
 c2c:	df 93       	push	r29
 c2e:	fb 01       	movw	r30, r22
 c30:	23 81       	ldd	r18, Z+3	; 0x03
 c32:	21 fd       	sbrc	r18, 1
 c34:	03 c0       	rjmp	.+6      	; 0xc3c <fputc+0x16>
 c36:	8f ef       	ldi	r24, 0xFF	; 255
 c38:	9f ef       	ldi	r25, 0xFF	; 255
 c3a:	2c c0       	rjmp	.+88     	; 0xc94 <fputc+0x6e>
 c3c:	22 ff       	sbrs	r18, 2
 c3e:	16 c0       	rjmp	.+44     	; 0xc6c <fputc+0x46>
 c40:	46 81       	ldd	r20, Z+6	; 0x06
 c42:	57 81       	ldd	r21, Z+7	; 0x07
 c44:	24 81       	ldd	r18, Z+4	; 0x04
 c46:	35 81       	ldd	r19, Z+5	; 0x05
 c48:	42 17       	cp	r20, r18
 c4a:	53 07       	cpc	r21, r19
 c4c:	44 f4       	brge	.+16     	; 0xc5e <fputc+0x38>
 c4e:	a0 81       	ld	r26, Z
 c50:	b1 81       	ldd	r27, Z+1	; 0x01
 c52:	9d 01       	movw	r18, r26
 c54:	2f 5f       	subi	r18, 0xFF	; 255
 c56:	3f 4f       	sbci	r19, 0xFF	; 255
 c58:	31 83       	std	Z+1, r19	; 0x01
 c5a:	20 83       	st	Z, r18
 c5c:	8c 93       	st	X, r24
 c5e:	26 81       	ldd	r18, Z+6	; 0x06
 c60:	37 81       	ldd	r19, Z+7	; 0x07
 c62:	2f 5f       	subi	r18, 0xFF	; 255
 c64:	3f 4f       	sbci	r19, 0xFF	; 255
 c66:	37 83       	std	Z+7, r19	; 0x07
 c68:	26 83       	std	Z+6, r18	; 0x06
 c6a:	14 c0       	rjmp	.+40     	; 0xc94 <fputc+0x6e>
 c6c:	8b 01       	movw	r16, r22
 c6e:	ec 01       	movw	r28, r24
 c70:	fb 01       	movw	r30, r22
 c72:	00 84       	ldd	r0, Z+8	; 0x08
 c74:	f1 85       	ldd	r31, Z+9	; 0x09
 c76:	e0 2d       	mov	r30, r0
 c78:	09 95       	icall
 c7a:	89 2b       	or	r24, r25
 c7c:	e1 f6       	brne	.-72     	; 0xc36 <fputc+0x10>
 c7e:	d8 01       	movw	r26, r16
 c80:	16 96       	adiw	r26, 0x06	; 6
 c82:	8d 91       	ld	r24, X+
 c84:	9c 91       	ld	r25, X
 c86:	17 97       	sbiw	r26, 0x07	; 7
 c88:	01 96       	adiw	r24, 0x01	; 1
 c8a:	17 96       	adiw	r26, 0x07	; 7
 c8c:	9c 93       	st	X, r25
 c8e:	8e 93       	st	-X, r24
 c90:	16 97       	sbiw	r26, 0x06	; 6
 c92:	ce 01       	movw	r24, r28
 c94:	df 91       	pop	r29
 c96:	cf 91       	pop	r28
 c98:	1f 91       	pop	r17
 c9a:	0f 91       	pop	r16
 c9c:	08 95       	ret

00000c9e <__ultoa_invert>:
 c9e:	fa 01       	movw	r30, r20
 ca0:	aa 27       	eor	r26, r26
 ca2:	28 30       	cpi	r18, 0x08	; 8
 ca4:	51 f1       	breq	.+84     	; 0xcfa <__ultoa_invert+0x5c>
 ca6:	20 31       	cpi	r18, 0x10	; 16
 ca8:	81 f1       	breq	.+96     	; 0xd0a <__ultoa_invert+0x6c>
 caa:	e8 94       	clt
 cac:	6f 93       	push	r22
 cae:	6e 7f       	andi	r22, 0xFE	; 254
 cb0:	6e 5f       	subi	r22, 0xFE	; 254
 cb2:	7f 4f       	sbci	r23, 0xFF	; 255
 cb4:	8f 4f       	sbci	r24, 0xFF	; 255
 cb6:	9f 4f       	sbci	r25, 0xFF	; 255
 cb8:	af 4f       	sbci	r26, 0xFF	; 255
 cba:	b1 e0       	ldi	r27, 0x01	; 1
 cbc:	3e d0       	rcall	.+124    	; 0xd3a <__ultoa_invert+0x9c>
 cbe:	b4 e0       	ldi	r27, 0x04	; 4
 cc0:	3c d0       	rcall	.+120    	; 0xd3a <__ultoa_invert+0x9c>
 cc2:	67 0f       	add	r22, r23
 cc4:	78 1f       	adc	r23, r24
 cc6:	89 1f       	adc	r24, r25
 cc8:	9a 1f       	adc	r25, r26
 cca:	a1 1d       	adc	r26, r1
 ccc:	68 0f       	add	r22, r24
 cce:	79 1f       	adc	r23, r25
 cd0:	8a 1f       	adc	r24, r26
 cd2:	91 1d       	adc	r25, r1
 cd4:	a1 1d       	adc	r26, r1
 cd6:	6a 0f       	add	r22, r26
 cd8:	71 1d       	adc	r23, r1
 cda:	81 1d       	adc	r24, r1
 cdc:	91 1d       	adc	r25, r1
 cde:	a1 1d       	adc	r26, r1
 ce0:	20 d0       	rcall	.+64     	; 0xd22 <__ultoa_invert+0x84>
 ce2:	09 f4       	brne	.+2      	; 0xce6 <__ultoa_invert+0x48>
 ce4:	68 94       	set
 ce6:	3f 91       	pop	r19
 ce8:	2a e0       	ldi	r18, 0x0A	; 10
 cea:	26 9f       	mul	r18, r22
 cec:	11 24       	eor	r1, r1
 cee:	30 19       	sub	r19, r0
 cf0:	30 5d       	subi	r19, 0xD0	; 208
 cf2:	31 93       	st	Z+, r19
 cf4:	de f6       	brtc	.-74     	; 0xcac <__ultoa_invert+0xe>
 cf6:	cf 01       	movw	r24, r30
 cf8:	08 95       	ret
 cfa:	46 2f       	mov	r20, r22
 cfc:	47 70       	andi	r20, 0x07	; 7
 cfe:	40 5d       	subi	r20, 0xD0	; 208
 d00:	41 93       	st	Z+, r20
 d02:	b3 e0       	ldi	r27, 0x03	; 3
 d04:	0f d0       	rcall	.+30     	; 0xd24 <__ultoa_invert+0x86>
 d06:	c9 f7       	brne	.-14     	; 0xcfa <__ultoa_invert+0x5c>
 d08:	f6 cf       	rjmp	.-20     	; 0xcf6 <__ultoa_invert+0x58>
 d0a:	46 2f       	mov	r20, r22
 d0c:	4f 70       	andi	r20, 0x0F	; 15
 d0e:	40 5d       	subi	r20, 0xD0	; 208
 d10:	4a 33       	cpi	r20, 0x3A	; 58
 d12:	18 f0       	brcs	.+6      	; 0xd1a <__ultoa_invert+0x7c>
 d14:	49 5d       	subi	r20, 0xD9	; 217
 d16:	31 fd       	sbrc	r19, 1
 d18:	40 52       	subi	r20, 0x20	; 32
 d1a:	41 93       	st	Z+, r20
 d1c:	02 d0       	rcall	.+4      	; 0xd22 <__ultoa_invert+0x84>
 d1e:	a9 f7       	brne	.-22     	; 0xd0a <__ultoa_invert+0x6c>
 d20:	ea cf       	rjmp	.-44     	; 0xcf6 <__ultoa_invert+0x58>
 d22:	b4 e0       	ldi	r27, 0x04	; 4
 d24:	a6 95       	lsr	r26
 d26:	97 95       	ror	r25
 d28:	87 95       	ror	r24
 d2a:	77 95       	ror	r23
 d2c:	67 95       	ror	r22
 d2e:	ba 95       	dec	r27
 d30:	c9 f7       	brne	.-14     	; 0xd24 <__ultoa_invert+0x86>
 d32:	00 97       	sbiw	r24, 0x00	; 0
 d34:	61 05       	cpc	r22, r1
 d36:	71 05       	cpc	r23, r1
 d38:	08 95       	ret
 d3a:	9b 01       	movw	r18, r22
 d3c:	ac 01       	movw	r20, r24
 d3e:	0a 2e       	mov	r0, r26
 d40:	06 94       	lsr	r0
 d42:	57 95       	ror	r21
 d44:	47 95       	ror	r20
 d46:	37 95       	ror	r19
 d48:	27 95       	ror	r18
 d4a:	ba 95       	dec	r27
 d4c:	c9 f7       	brne	.-14     	; 0xd40 <__ultoa_invert+0xa2>
 d4e:	62 0f       	add	r22, r18
 d50:	73 1f       	adc	r23, r19
 d52:	84 1f       	adc	r24, r20
 d54:	95 1f       	adc	r25, r21
 d56:	a0 1d       	adc	r26, r0
 d58:	08 95       	ret

00000d5a <__divmodsi4>:
 d5a:	05 2e       	mov	r0, r21
 d5c:	97 fb       	bst	r25, 7
 d5e:	1e f4       	brtc	.+6      	; 0xd66 <__divmodsi4+0xc>
 d60:	00 94       	com	r0
 d62:	0e 94 c4 06 	call	0xd88	; 0xd88 <__negsi2>
 d66:	57 fd       	sbrc	r21, 7
 d68:	07 d0       	rcall	.+14     	; 0xd78 <__divmodsi4_neg2>
 d6a:	0e 94 16 07 	call	0xe2c	; 0xe2c <__udivmodsi4>
 d6e:	07 fc       	sbrc	r0, 7
 d70:	03 d0       	rcall	.+6      	; 0xd78 <__divmodsi4_neg2>
 d72:	4e f4       	brtc	.+18     	; 0xd86 <__divmodsi4_exit>
 d74:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__negsi2>

00000d78 <__divmodsi4_neg2>:
 d78:	50 95       	com	r21
 d7a:	40 95       	com	r20
 d7c:	30 95       	com	r19
 d7e:	21 95       	neg	r18
 d80:	3f 4f       	sbci	r19, 0xFF	; 255
 d82:	4f 4f       	sbci	r20, 0xFF	; 255
 d84:	5f 4f       	sbci	r21, 0xFF	; 255

00000d86 <__divmodsi4_exit>:
 d86:	08 95       	ret

00000d88 <__negsi2>:
 d88:	90 95       	com	r25
 d8a:	80 95       	com	r24
 d8c:	70 95       	com	r23
 d8e:	61 95       	neg	r22
 d90:	7f 4f       	sbci	r23, 0xFF	; 255
 d92:	8f 4f       	sbci	r24, 0xFF	; 255
 d94:	9f 4f       	sbci	r25, 0xFF	; 255
 d96:	08 95       	ret

00000d98 <__muluhisi3>:
 d98:	0e 94 38 07 	call	0xe70	; 0xe70 <__umulhisi3>
 d9c:	a5 9f       	mul	r26, r21
 d9e:	90 0d       	add	r25, r0
 da0:	b4 9f       	mul	r27, r20
 da2:	90 0d       	add	r25, r0
 da4:	a4 9f       	mul	r26, r20
 da6:	80 0d       	add	r24, r0
 da8:	91 1d       	adc	r25, r1
 daa:	11 24       	eor	r1, r1
 dac:	08 95       	ret

00000dae <__mulshisi3>:
 dae:	b7 ff       	sbrs	r27, 7
 db0:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__muluhisi3>

00000db4 <__mulohisi3>:
 db4:	0e 94 cc 06 	call	0xd98	; 0xd98 <__muluhisi3>
 db8:	82 1b       	sub	r24, r18
 dba:	93 0b       	sbc	r25, r19
 dbc:	08 95       	ret

00000dbe <__prologue_saves__>:
 dbe:	2f 92       	push	r2
 dc0:	3f 92       	push	r3
 dc2:	4f 92       	push	r4
 dc4:	5f 92       	push	r5
 dc6:	6f 92       	push	r6
 dc8:	7f 92       	push	r7
 dca:	8f 92       	push	r8
 dcc:	9f 92       	push	r9
 dce:	af 92       	push	r10
 dd0:	bf 92       	push	r11
 dd2:	cf 92       	push	r12
 dd4:	df 92       	push	r13
 dd6:	ef 92       	push	r14
 dd8:	ff 92       	push	r15
 dda:	0f 93       	push	r16
 ddc:	1f 93       	push	r17
 dde:	cf 93       	push	r28
 de0:	df 93       	push	r29
 de2:	cd b7       	in	r28, 0x3d	; 61
 de4:	de b7       	in	r29, 0x3e	; 62
 de6:	ca 1b       	sub	r28, r26
 de8:	db 0b       	sbc	r29, r27
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	de bf       	out	0x3e, r29	; 62
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	cd bf       	out	0x3d, r28	; 61
 df4:	09 94       	ijmp

00000df6 <__epilogue_restores__>:
 df6:	2a 88       	ldd	r2, Y+18	; 0x12
 df8:	39 88       	ldd	r3, Y+17	; 0x11
 dfa:	48 88       	ldd	r4, Y+16	; 0x10
 dfc:	5f 84       	ldd	r5, Y+15	; 0x0f
 dfe:	6e 84       	ldd	r6, Y+14	; 0x0e
 e00:	7d 84       	ldd	r7, Y+13	; 0x0d
 e02:	8c 84       	ldd	r8, Y+12	; 0x0c
 e04:	9b 84       	ldd	r9, Y+11	; 0x0b
 e06:	aa 84       	ldd	r10, Y+10	; 0x0a
 e08:	b9 84       	ldd	r11, Y+9	; 0x09
 e0a:	c8 84       	ldd	r12, Y+8	; 0x08
 e0c:	df 80       	ldd	r13, Y+7	; 0x07
 e0e:	ee 80       	ldd	r14, Y+6	; 0x06
 e10:	fd 80       	ldd	r15, Y+5	; 0x05
 e12:	0c 81       	ldd	r16, Y+4	; 0x04
 e14:	1b 81       	ldd	r17, Y+3	; 0x03
 e16:	aa 81       	ldd	r26, Y+2	; 0x02
 e18:	b9 81       	ldd	r27, Y+1	; 0x01
 e1a:	ce 0f       	add	r28, r30
 e1c:	d1 1d       	adc	r29, r1
 e1e:	0f b6       	in	r0, 0x3f	; 63
 e20:	f8 94       	cli
 e22:	de bf       	out	0x3e, r29	; 62
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	cd bf       	out	0x3d, r28	; 61
 e28:	ed 01       	movw	r28, r26
 e2a:	08 95       	ret

00000e2c <__udivmodsi4>:
 e2c:	a1 e2       	ldi	r26, 0x21	; 33
 e2e:	1a 2e       	mov	r1, r26
 e30:	aa 1b       	sub	r26, r26
 e32:	bb 1b       	sub	r27, r27
 e34:	fd 01       	movw	r30, r26
 e36:	0d c0       	rjmp	.+26     	; 0xe52 <__udivmodsi4_ep>

00000e38 <__udivmodsi4_loop>:
 e38:	aa 1f       	adc	r26, r26
 e3a:	bb 1f       	adc	r27, r27
 e3c:	ee 1f       	adc	r30, r30
 e3e:	ff 1f       	adc	r31, r31
 e40:	a2 17       	cp	r26, r18
 e42:	b3 07       	cpc	r27, r19
 e44:	e4 07       	cpc	r30, r20
 e46:	f5 07       	cpc	r31, r21
 e48:	20 f0       	brcs	.+8      	; 0xe52 <__udivmodsi4_ep>
 e4a:	a2 1b       	sub	r26, r18
 e4c:	b3 0b       	sbc	r27, r19
 e4e:	e4 0b       	sbc	r30, r20
 e50:	f5 0b       	sbc	r31, r21

00000e52 <__udivmodsi4_ep>:
 e52:	66 1f       	adc	r22, r22
 e54:	77 1f       	adc	r23, r23
 e56:	88 1f       	adc	r24, r24
 e58:	99 1f       	adc	r25, r25
 e5a:	1a 94       	dec	r1
 e5c:	69 f7       	brne	.-38     	; 0xe38 <__udivmodsi4_loop>
 e5e:	60 95       	com	r22
 e60:	70 95       	com	r23
 e62:	80 95       	com	r24
 e64:	90 95       	com	r25
 e66:	9b 01       	movw	r18, r22
 e68:	ac 01       	movw	r20, r24
 e6a:	bd 01       	movw	r22, r26
 e6c:	cf 01       	movw	r24, r30
 e6e:	08 95       	ret

00000e70 <__umulhisi3>:
 e70:	a2 9f       	mul	r26, r18
 e72:	b0 01       	movw	r22, r0
 e74:	b3 9f       	mul	r27, r19
 e76:	c0 01       	movw	r24, r0
 e78:	a3 9f       	mul	r26, r19
 e7a:	70 0d       	add	r23, r0
 e7c:	81 1d       	adc	r24, r1
 e7e:	11 24       	eor	r1, r1
 e80:	91 1d       	adc	r25, r1
 e82:	b2 9f       	mul	r27, r18
 e84:	70 0d       	add	r23, r0
 e86:	81 1d       	adc	r24, r1
 e88:	11 24       	eor	r1, r1
 e8a:	91 1d       	adc	r25, r1
 e8c:	08 95       	ret

00000e8e <_exit>:
 e8e:	f8 94       	cli

00000e90 <__stop_program>:
 e90:	ff cf       	rjmp	.-2      	; 0xe90 <__stop_program>
